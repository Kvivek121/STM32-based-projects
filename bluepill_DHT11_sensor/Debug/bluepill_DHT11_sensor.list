
bluepill_DHT11_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080042f0  080042f0  000142f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004394  08004394  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004394  08004394  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004394  08004394  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004394  08004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004398  08004398  00014398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800439c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000080  0800441c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  0800441c  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b613  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a8d  00000000  00000000  0002b6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  0002d150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  0002de70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ce7  00000000  00000000  0002eae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2bc  00000000  00000000  000467c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad13  00000000  00000000  00054a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df796  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db8  00000000  00000000  000df7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	080042d8 	.word	0x080042d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	080042d8 	.word	0x080042d8

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__gesf2>:
 8000e44:	f04f 3cff 	mov.w	ip, #4294967295
 8000e48:	e006      	b.n	8000e58 <__cmpsf2+0x4>
 8000e4a:	bf00      	nop

08000e4c <__lesf2>:
 8000e4c:	f04f 0c01 	mov.w	ip, #1
 8000e50:	e002      	b.n	8000e58 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__cmpsf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	bf18      	it	ne
 8000e6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e6e:	d011      	beq.n	8000e94 <__cmpsf2+0x40>
 8000e70:	b001      	add	sp, #4
 8000e72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e76:	bf18      	it	ne
 8000e78:	ea90 0f01 	teqne	r0, r1
 8000e7c:	bf58      	it	pl
 8000e7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e82:	bf88      	it	hi
 8000e84:	17c8      	asrhi	r0, r1, #31
 8000e86:	bf38      	it	cc
 8000e88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e8c:	bf18      	it	ne
 8000e8e:	f040 0001 	orrne.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e98:	d102      	bne.n	8000ea0 <__cmpsf2+0x4c>
 8000e9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e9e:	d105      	bne.n	8000eac <__cmpsf2+0x58>
 8000ea0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea4:	d1e4      	bne.n	8000e70 <__cmpsf2+0x1c>
 8000ea6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eaa:	d0e1      	beq.n	8000e70 <__cmpsf2+0x1c>
 8000eac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_cfrcmple>:
 8000eb4:	4684      	mov	ip, r0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4661      	mov	r1, ip
 8000eba:	e7ff      	b.n	8000ebc <__aeabi_cfcmpeq>

08000ebc <__aeabi_cfcmpeq>:
 8000ebc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ebe:	f7ff ffc9 	bl	8000e54 <__cmpsf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	bf48      	it	mi
 8000ec6:	f110 0f00 	cmnmi.w	r0, #0
 8000eca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ecc <__aeabi_fcmpeq>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff fff4 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2001      	moveq	r0, #1
 8000ed8:	2000      	movne	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmplt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffea 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmple>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffe0 	bl	8000ebc <__aeabi_cfcmpeq>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmpge>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffd2 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpgt>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffc8 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f24:	bf34      	ite	cc
 8000f26:	2001      	movcc	r0, #1
 8000f28:	2000      	movcs	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_f2uiz>:
 8000f30:	0042      	lsls	r2, r0, #1
 8000f32:	d20e      	bcs.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f38:	d30b      	bcc.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f42:	d409      	bmi.n	8000f58 <__aeabi_f2uiz+0x28>
 8000f44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f4c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f50:	4770      	bx	lr
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	4770      	bx	lr
 8000f58:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f5c:	d101      	bne.n	8000f62 <__aeabi_f2uiz+0x32>
 8000f5e:	0242      	lsls	r2, r0, #9
 8000f60:	d102      	bne.n	8000f68 <__aeabi_f2uiz+0x38>
 8000f62:	f04f 30ff 	mov.w	r0, #4294967295
 8000f66:	4770      	bx	lr
 8000f68:	f04f 0000 	mov.w	r0, #0
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000f7a:	4a38      	ldr	r2, [pc, #224]	; (800105c <HD44780_Init+0xec>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000f80:	4b37      	ldr	r3, [pc, #220]	; (8001060 <HD44780_Init+0xf0>)
 8000f82:	2208      	movs	r2, #8
 8000f84:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000f86:	4b37      	ldr	r3, [pc, #220]	; (8001064 <HD44780_Init+0xf4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000f8c:	4b33      	ldr	r3, [pc, #204]	; (800105c <HD44780_Init+0xec>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d907      	bls.n	8000fa4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000f94:	4b33      	ldr	r3, [pc, #204]	; (8001064 <HD44780_Init+0xf4>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b31      	ldr	r3, [pc, #196]	; (8001064 <HD44780_Init+0xf4>)
 8000fa0:	701a      	strb	r2, [r3, #0]
 8000fa2:	e006      	b.n	8000fb2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000fa4:	4b2f      	ldr	r3, [pc, #188]	; (8001064 <HD44780_Init+0xf4>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <HD44780_Init+0xf4>)
 8000fb0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000fb2:	f000 f985 	bl	80012c0 <DelayInit>
  HAL_Delay(50);
 8000fb6:	2032      	movs	r0, #50	; 0x32
 8000fb8:	f000 ff22 	bl	8001e00 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <HD44780_Init+0xf0>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f943 	bl	800124c <ExpanderWrite>
  HAL_Delay(1000);
 8000fc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fca:	f000 ff19 	bl	8001e00 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000fce:	2030      	movs	r0, #48	; 0x30
 8000fd0:	f000 f92b 	bl	800122a <Write4Bits>
  DelayUS(4500);
 8000fd4:	f241 1094 	movw	r0, #4500	; 0x1194
 8000fd8:	f000 f99a 	bl	8001310 <DelayUS>

  Write4Bits(0x03 << 4);
 8000fdc:	2030      	movs	r0, #48	; 0x30
 8000fde:	f000 f924 	bl	800122a <Write4Bits>
  DelayUS(4500);
 8000fe2:	f241 1094 	movw	r0, #4500	; 0x1194
 8000fe6:	f000 f993 	bl	8001310 <DelayUS>

  Write4Bits(0x03 << 4);
 8000fea:	2030      	movs	r0, #48	; 0x30
 8000fec:	f000 f91d 	bl	800122a <Write4Bits>
  DelayUS(4500);
 8000ff0:	f241 1094 	movw	r0, #4500	; 0x1194
 8000ff4:	f000 f98c 	bl	8001310 <DelayUS>

  Write4Bits(0x02 << 4);
 8000ff8:	2020      	movs	r0, #32
 8000ffa:	f000 f916 	bl	800122a <Write4Bits>
  DelayUS(100);
 8000ffe:	2064      	movs	r0, #100	; 0x64
 8001000:	f000 f986 	bl	8001310 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HD44780_Init+0xf4>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	f043 0320 	orr.w	r3, r3, #32
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f8ce 	bl	80011b0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HD44780_Init+0xf8>)
 8001016:	2204      	movs	r2, #4
 8001018:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800101a:	f000 f875 	bl	8001108 <HD44780_Display>
  HD44780_Clear();
 800101e:	f000 f82b 	bl	8001078 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <HD44780_Init+0xfc>)
 8001024:	2202      	movs	r2, #2
 8001026:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001028:	4b10      	ldr	r3, [pc, #64]	; (800106c <HD44780_Init+0xfc>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f8bc 	bl	80011b0 <SendCommand>
  DelayUS(4500);
 8001038:	f241 1094 	movw	r0, #4500	; 0x1194
 800103c:	f000 f968 	bl	8001310 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001040:	490b      	ldr	r1, [pc, #44]	; (8001070 <HD44780_Init+0x100>)
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f876 	bl	8001134 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001048:	490a      	ldr	r1, [pc, #40]	; (8001074 <HD44780_Init+0x104>)
 800104a:	2001      	movs	r0, #1
 800104c:	f000 f872 	bl	8001134 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001050:	f000 f81d 	bl	800108e <HD44780_Home>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	2000009f 	.word	0x2000009f
 8001060:	200000a0 	.word	0x200000a0
 8001064:	2000009c 	.word	0x2000009c
 8001068:	2000009d 	.word	0x2000009d
 800106c:	2000009e 	.word	0x2000009e
 8001070:	20000000 	.word	0x20000000
 8001074:	20000008 	.word	0x20000008

08001078 <HD44780_Clear>:

void HD44780_Clear()
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800107c:	2001      	movs	r0, #1
 800107e:	f000 f897 	bl	80011b0 <SendCommand>
  DelayUS(2000);
 8001082:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001086:	f000 f943 	bl	8001310 <DelayUS>
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}

0800108e <HD44780_Home>:

void HD44780_Home()
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8001092:	2002      	movs	r0, #2
 8001094:	f000 f88c 	bl	80011b0 <SendCommand>
  DelayUS(2000);
 8001098:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800109c:	f000 f938 	bl	8001310 <DelayUS>
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	460a      	mov	r2, r1
 80010ae:	71fb      	strb	r3, [r7, #7]
 80010b0:	4613      	mov	r3, r2
 80010b2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HD44780_SetCursor+0x5c>)
 80010b6:	f107 0408 	add.w	r4, r7, #8
 80010ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <HD44780_SetCursor+0x60>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	79ba      	ldrb	r2, [r7, #6]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d303      	bcc.n	80010d2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HD44780_SetCursor+0x60>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80010d2:	79bb      	ldrb	r3, [r7, #6]
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	3318      	adds	r3, #24
 80010d8:	443b      	add	r3, r7
 80010da:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	4413      	add	r3, r2
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 f85d 	bl	80011b0 <SendCommand>
}
 80010f6:	bf00      	nop
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd90      	pop	{r4, r7, pc}
 80010fe:	bf00      	nop
 8001100:	080042f0 	.word	0x080042f0
 8001104:	2000009f 	.word	0x2000009f

08001108 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <HD44780_Display+0x28>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HD44780_Display+0x28>)
 8001118:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HD44780_Display+0x28>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	f043 0308 	orr.w	r3, r3, #8
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f843 	bl	80011b0 <SendCommand>
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000009d 	.word	0x2000009d

08001134 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	b25b      	sxtb	r3, r3
 800114e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001152:	b25b      	sxtb	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f82a 	bl	80011b0 <SendCommand>
  for (int i=0; i<8; i++)
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	e009      	b.n	8001176 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	4413      	add	r3, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f82e 	bl	80011cc <SendChar>
  for (int i=0; i<8; i++)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3301      	adds	r3, #1
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2b07      	cmp	r3, #7
 800117a:	ddf2      	ble.n	8001162 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800118e:	e006      	b.n	800119e <HD44780_PrintStr+0x18>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f000 f817 	bl	80011cc <SendChar>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f4      	bne.n	8001190 <HD44780_PrintStr+0xa>
}
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f812 	bl	80011e8 <Send>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <SendChar>:

static void SendChar(uint8_t ch)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2101      	movs	r1, #1
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f804 	bl	80011e8 <Send>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	460a      	mov	r2, r1
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	4613      	mov	r3, r2
 80011f6:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f023 030f 	bic.w	r3, r3, #15
 80011fe:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	011b      	lsls	r3, r3, #4
 8001204:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	79bb      	ldrb	r3, [r7, #6]
 800120a:	4313      	orrs	r3, r2
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f80b 	bl	800122a <Write4Bits>
  Write4Bits((lownib)|mode);
 8001214:	7bba      	ldrb	r2, [r7, #14]
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	4313      	orrs	r3, r2
 800121a:	b2db      	uxtb	r3, r3
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f804 	bl	800122a <Write4Bits>
}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f808 	bl	800124c <ExpanderWrite>
  PulseEnable(value);
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f820 	bl	8001284 <PulseEnable>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af02      	add	r7, sp, #8
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <ExpanderWrite+0x30>)
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	4313      	orrs	r3, r2
 800125e:	b2db      	uxtb	r3, r3
 8001260:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001262:	f107 020f 	add.w	r2, r7, #15
 8001266:	230a      	movs	r3, #10
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2301      	movs	r3, #1
 800126c:	214e      	movs	r1, #78	; 0x4e
 800126e:	4804      	ldr	r0, [pc, #16]	; (8001280 <ExpanderWrite+0x34>)
 8001270:	f001 f9c6 	bl	8002600 <HAL_I2C_Master_Transmit>
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200000a0 	.word	0x200000a0
 8001280:	200000a4 	.word	0x200000a4

08001284 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ffd8 	bl	800124c <ExpanderWrite>
  DelayUS(20);
 800129c:	2014      	movs	r0, #20
 800129e:	f000 f837 	bl	8001310 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f023 0304 	bic.w	r3, r3, #4
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ffce 	bl	800124c <ExpanderWrite>
  DelayUS(20);
 80012b0:	2014      	movs	r0, #20
 80012b2:	f000 f82d 	bl	8001310 <DelayUS>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <DelayInit>:

static void DelayInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <DelayInit+0x48>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <DelayInit+0x48>)
 80012ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012ce:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80012d0:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <DelayInit+0x48>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <DelayInit+0x48>)
 80012d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012da:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <DelayInit+0x4c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0a      	ldr	r2, [pc, #40]	; (800130c <DelayInit+0x4c>)
 80012e2:	f023 0301 	bic.w	r3, r3, #1
 80012e6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <DelayInit+0x4c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <DelayInit+0x4c>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <DelayInit+0x4c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80012fa:	bf00      	nop
  __ASM volatile ("NOP");
 80012fc:	bf00      	nop
  __ASM volatile ("NOP");
 80012fe:	bf00      	nop
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	e000edf0 	.word	0xe000edf0
 800130c:	e0001000 	.word	0xe0001000

08001310 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <DelayUS+0x40>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <DelayUS+0x44>)
 800131e:	fba2 2303 	umull	r2, r3, r2, r3
 8001322:	0c9a      	lsrs	r2, r3, #18
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	fb02 f303 	mul.w	r3, r2, r3
 800132a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <DelayUS+0x48>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <DelayUS+0x48>)
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f6      	bhi.n	8001332 <DelayUS+0x22>
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	371c      	adds	r7, #28
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	20000010 	.word	0x20000010
 8001354:	431bde83 	.word	0x431bde83
 8001358:	e0001000 	.word	0xe0001000

0800135c <microDelay>:
char strCopy1[15];
char strCopy2[15];
char strCopy3[15];

void microDelay (uint16_t delay)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <microDelay+0x2c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 800136e:	bf00      	nop
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <microDelay+0x2c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	429a      	cmp	r2, r3
 800137a:	d3f9      	bcc.n	8001370 <microDelay+0x14>
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	200000f8 	.word	0x200000f8

0800138c <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 80013a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2302      	movs	r3, #2
 80013ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	482c      	ldr	r0, [pc, #176]	; (800146c <DHT11_Start+0xe0>)
 80013ba:	f000 fe29 	bl	8002010 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c4:	4829      	ldr	r0, [pc, #164]	; (800146c <DHT11_Start+0xe0>)
 80013c6:	f000 ffbe 	bl	8002346 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 80013ca:	2014      	movs	r0, #20
 80013cc:	f000 fd18 	bl	8001e00 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80013d0:	2201      	movs	r2, #1
 80013d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d6:	4825      	ldr	r0, [pc, #148]	; (800146c <DHT11_Start+0xe0>)
 80013d8:	f000 ffb5 	bl	8002346 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 80013dc:	201e      	movs	r0, #30
 80013de:	f7ff ffbd 	bl	800135c <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	4619      	mov	r1, r3
 80013ee:	481f      	ldr	r0, [pc, #124]	; (800146c <DHT11_Start+0xe0>)
 80013f0:	f000 fe0e 	bl	8002010 <HAL_GPIO_Init>
  microDelay (40);
 80013f4:	2028      	movs	r0, #40	; 0x28
 80013f6:	f7ff ffb1 	bl	800135c <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80013fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013fe:	481b      	ldr	r0, [pc, #108]	; (800146c <DHT11_Start+0xe0>)
 8001400:	f000 ff8a 	bl	8002318 <HAL_GPIO_ReadPin>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10c      	bne.n	8001424 <DHT11_Start+0x98>
  {
    microDelay (80);
 800140a:	2050      	movs	r0, #80	; 0x50
 800140c:	f7ff ffa6 	bl	800135c <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001410:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001414:	4815      	ldr	r0, [pc, #84]	; (800146c <DHT11_Start+0xe0>)
 8001416:	f000 ff7f 	bl	8002318 <HAL_GPIO_ReadPin>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <DHT11_Start+0x98>
 8001420:	2301      	movs	r3, #1
 8001422:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8001424:	f000 fce2 	bl	8001dec <HAL_GetTick>
 8001428:	4603      	mov	r3, r0
 800142a:	4a11      	ldr	r2, [pc, #68]	; (8001470 <DHT11_Start+0xe4>)
 800142c:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 800142e:	f000 fcdd 	bl	8001dec <HAL_GetTick>
 8001432:	4603      	mov	r3, r0
 8001434:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <DHT11_Start+0xe8>)
 8001436:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001438:	e004      	b.n	8001444 <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 800143a:	f000 fcd7 	bl	8001dec <HAL_GetTick>
 800143e:	4603      	mov	r3, r0
 8001440:	4a0c      	ldr	r2, [pc, #48]	; (8001474 <DHT11_Start+0xe8>)
 8001442:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001448:	4808      	ldr	r0, [pc, #32]	; (800146c <DHT11_Start+0xe0>)
 800144a:	f000 ff65 	bl	8002318 <HAL_GPIO_ReadPin>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d006      	beq.n	8001462 <DHT11_Start+0xd6>
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <DHT11_Start+0xe4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	1c9a      	adds	r2, r3, #2
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <DHT11_Start+0xe8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d8eb      	bhi.n	800143a <DHT11_Start+0xae>
  }
  return Response;
 8001462:	7dfb      	ldrb	r3, [r7, #23]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40010c00 	.word	0x40010c00
 8001470:	20000148 	.word	0x20000148
 8001474:	2000014c 	.word	0x2000014c

08001478 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 800147e:	2300      	movs	r3, #0
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	e066      	b.n	8001552 <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8001484:	f000 fcb2 	bl	8001dec <HAL_GetTick>
 8001488:	4603      	mov	r3, r0
 800148a:	4a36      	ldr	r2, [pc, #216]	; (8001564 <DHT11_Read+0xec>)
 800148c:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 800148e:	f000 fcad 	bl	8001dec <HAL_GetTick>
 8001492:	4603      	mov	r3, r0
 8001494:	4a34      	ldr	r2, [pc, #208]	; (8001568 <DHT11_Read+0xf0>)
 8001496:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001498:	e004      	b.n	80014a4 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 800149a:	f000 fca7 	bl	8001dec <HAL_GetTick>
 800149e:	4603      	mov	r3, r0
 80014a0:	4a31      	ldr	r2, [pc, #196]	; (8001568 <DHT11_Read+0xf0>)
 80014a2:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80014a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a8:	4830      	ldr	r0, [pc, #192]	; (800156c <DHT11_Read+0xf4>)
 80014aa:	f000 ff35 	bl	8002318 <HAL_GPIO_ReadPin>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d106      	bne.n	80014c2 <DHT11_Read+0x4a>
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <DHT11_Read+0xec>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	1c9a      	adds	r2, r3, #2
 80014ba:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <DHT11_Read+0xf0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d8eb      	bhi.n	800149a <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 80014c2:	2028      	movs	r0, #40	; 0x28
 80014c4:	f7ff ff4a 	bl	800135c <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80014c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014cc:	4827      	ldr	r0, [pc, #156]	; (800156c <DHT11_Read+0xf4>)
 80014ce:	f000 ff23 	bl	8002318 <HAL_GPIO_ReadPin>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d10e      	bne.n	80014f6 <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2201      	movs	r2, #1
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	b25a      	sxtb	r2, r3
 80014ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014ee:	4013      	ands	r3, r2
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	71bb      	strb	r3, [r7, #6]
 80014f4:	e00b      	b.n	800150e <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	f1c3 0307 	rsb	r3, r3, #7
 80014fc:	2201      	movs	r2, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	b25a      	sxtb	r2, r3
 8001504:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001508:	4313      	orrs	r3, r2
 800150a:	b25b      	sxtb	r3, r3
 800150c:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 800150e:	f000 fc6d 	bl	8001dec <HAL_GetTick>
 8001512:	4603      	mov	r3, r0
 8001514:	4a13      	ldr	r2, [pc, #76]	; (8001564 <DHT11_Read+0xec>)
 8001516:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001518:	f000 fc68 	bl	8001dec <HAL_GetTick>
 800151c:	4603      	mov	r3, r0
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <DHT11_Read+0xf0>)
 8001520:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001522:	e004      	b.n	800152e <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001524:	f000 fc62 	bl	8001dec <HAL_GetTick>
 8001528:	4603      	mov	r3, r0
 800152a:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <DHT11_Read+0xf0>)
 800152c:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800152e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001532:	480e      	ldr	r0, [pc, #56]	; (800156c <DHT11_Read+0xf4>)
 8001534:	f000 fef0 	bl	8002318 <HAL_GPIO_ReadPin>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d006      	beq.n	800154c <DHT11_Read+0xd4>
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <DHT11_Read+0xec>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	1c9a      	adds	r2, r3, #2
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <DHT11_Read+0xf0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d8eb      	bhi.n	8001524 <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	3301      	adds	r3, #1
 8001550:	71fb      	strb	r3, [r7, #7]
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2b07      	cmp	r3, #7
 8001556:	d995      	bls.n	8001484 <DHT11_Read+0xc>
    }
  }
  return b;
 8001558:	79bb      	ldrb	r3, [r7, #6]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000148 	.word	0x20000148
 8001568:	2000014c 	.word	0x2000014c
 800156c:	40010c00 	.word	0x40010c00

08001570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001570:	b598      	push	{r3, r4, r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001574:	f000 fbe2 	bl	8001d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001578:	f000 f9b2 	bl	80018e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157c:	f000 fa74 	bl	8001a68 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001580:	f000 fa22 	bl	80019c8 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001584:	f000 f9f2 	bl	800196c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HD44780_Init(2);
 8001588:	2002      	movs	r0, #2
 800158a:	f7ff fcf1 	bl	8000f70 <HD44780_Init>
  HD44780_PrintStr("WELCOME!!!");
 800158e:	4890      	ldr	r0, [pc, #576]	; (80017d0 <main+0x260>)
 8001590:	f7ff fdf9 	bl	8001186 <HD44780_PrintStr>

  HAL_TIM_Base_Start(&htim1);
 8001594:	488f      	ldr	r0, [pc, #572]	; (80017d4 <main+0x264>)
 8001596:	f001 ff8f 	bl	80034b8 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
  		if (DHT11_Start()) {
 800159a:	f7ff fef7 	bl	800138c <DHT11_Start>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 8187 	beq.w	80018b4 <main+0x344>
  			RHI = DHT11_Read(); // Relative humidity integral
 80015a6:	f7ff ff67 	bl	8001478 <DHT11_Read>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b8a      	ldr	r3, [pc, #552]	; (80017d8 <main+0x268>)
 80015b0:	701a      	strb	r2, [r3, #0]
  			RHD = DHT11_Read(); // Relative humidity decimal
 80015b2:	f7ff ff61 	bl	8001478 <DHT11_Read>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b88      	ldr	r3, [pc, #544]	; (80017dc <main+0x26c>)
 80015bc:	701a      	strb	r2, [r3, #0]
  			TCI = DHT11_Read(); // Celsius integral
 80015be:	f7ff ff5b 	bl	8001478 <DHT11_Read>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b86      	ldr	r3, [pc, #536]	; (80017e0 <main+0x270>)
 80015c8:	701a      	strb	r2, [r3, #0]
  			TCD = DHT11_Read(); // Celsius decimal
 80015ca:	f7ff ff55 	bl	8001478 <DHT11_Read>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b84      	ldr	r3, [pc, #528]	; (80017e4 <main+0x274>)
 80015d4:	701a      	strb	r2, [r3, #0]
  			SUM = DHT11_Read(); // Check sum
 80015d6:	f7ff ff4f 	bl	8001478 <DHT11_Read>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	4b82      	ldr	r3, [pc, #520]	; (80017e8 <main+0x278>)
 80015e0:	701a      	strb	r2, [r3, #0]
  			if (RHI + RHD + TCI + TCD == SUM) {
 80015e2:	4b7d      	ldr	r3, [pc, #500]	; (80017d8 <main+0x268>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b7c      	ldr	r3, [pc, #496]	; (80017dc <main+0x26c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4413      	add	r3, r2
 80015ee:	4a7c      	ldr	r2, [pc, #496]	; (80017e0 <main+0x270>)
 80015f0:	7812      	ldrb	r2, [r2, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a7b      	ldr	r2, [pc, #492]	; (80017e4 <main+0x274>)
 80015f6:	7812      	ldrb	r2, [r2, #0]
 80015f8:	4413      	add	r3, r2
 80015fa:	4a7b      	ldr	r2, [pc, #492]	; (80017e8 <main+0x278>)
 80015fc:	7812      	ldrb	r2, [r2, #0]
 80015fe:	4293      	cmp	r3, r2
 8001600:	f040 8158 	bne.w	80018b4 <main+0x344>
  //				} else {
  //					tCelsius = (float) ((TCI << 8) | TCD) / 10;
  //				}

  				// Can use RHI and TCI for any purposes if whole number only needed
  				tCelsius = (float) TCI + (float) (TCD / 10.0);
 8001604:	4b76      	ldr	r3, [pc, #472]	; (80017e0 <main+0x270>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fa73 	bl	8000af4 <__aeabi_ui2f>
 800160e:	4604      	mov	r4, r0
 8001610:	4b74      	ldr	r3, [pc, #464]	; (80017e4 <main+0x274>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe feeb 	bl	80003f0 <__aeabi_i2d>
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	4b73      	ldr	r3, [pc, #460]	; (80017ec <main+0x27c>)
 8001620:	f7ff f87a 	bl	8000718 <__aeabi_ddiv>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	f7ff f95c 	bl	80008e8 <__aeabi_d2f>
 8001630:	4603      	mov	r3, r0
 8001632:	4619      	mov	r1, r3
 8001634:	4620      	mov	r0, r4
 8001636:	f7ff f9ad 	bl	8000994 <__addsf3>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	4b6c      	ldr	r3, [pc, #432]	; (80017f0 <main+0x280>)
 8001640:	601a      	str	r2, [r3, #0]
  				tFahrenheit = tCelsius * 9 / 5 + 32;
 8001642:	4b6b      	ldr	r3, [pc, #428]	; (80017f0 <main+0x280>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	496b      	ldr	r1, [pc, #428]	; (80017f4 <main+0x284>)
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff faab 	bl	8000ba4 <__aeabi_fmul>
 800164e:	4603      	mov	r3, r0
 8001650:	4969      	ldr	r1, [pc, #420]	; (80017f8 <main+0x288>)
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fb5a 	bl	8000d0c <__aeabi_fdiv>
 8001658:	4603      	mov	r3, r0
 800165a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff f998 	bl	8000994 <__addsf3>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	4b64      	ldr	r3, [pc, #400]	; (80017fc <main+0x28c>)
 800166a:	601a      	str	r2, [r3, #0]
  //				RH = (float) RHI + (float) (RHD / 10.0);
  				RH = (float) ((RHI << 8) | RHD) / 10;
 800166c:	4b5a      	ldr	r3, [pc, #360]	; (80017d8 <main+0x268>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	4a5a      	ldr	r2, [pc, #360]	; (80017dc <main+0x26c>)
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	4313      	orrs	r3, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fa3f 	bl	8000afc <__aeabi_i2f>
 800167e:	4603      	mov	r3, r0
 8001680:	495f      	ldr	r1, [pc, #380]	; (8001800 <main+0x290>)
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fb42 	bl	8000d0c <__aeabi_fdiv>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <main+0x294>)
 800168e:	601a      	str	r2, [r3, #0]
  				// Can use tCelsius, tFahrenheit and RH for any purposes

  				TFI = tFahrenheit;  // Fahrenheit integral
 8001690:	4b5a      	ldr	r3, [pc, #360]	; (80017fc <main+0x28c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fc4b 	bl	8000f30 <__aeabi_f2uiz>
 800169a:	4603      	mov	r3, r0
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4b5a      	ldr	r3, [pc, #360]	; (8001808 <main+0x298>)
 80016a0:	701a      	strb	r2, [r3, #0]
  				TFD = tFahrenheit * 10 - TFI * 10; // Fahrenheit decimal
 80016a2:	4b56      	ldr	r3, [pc, #344]	; (80017fc <main+0x28c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4956      	ldr	r1, [pc, #344]	; (8001800 <main+0x290>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fa7b 	bl	8000ba4 <__aeabi_fmul>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461c      	mov	r4, r3
 80016b2:	4b55      	ldr	r3, [pc, #340]	; (8001808 <main+0x298>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fa1b 	bl	8000afc <__aeabi_i2f>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4619      	mov	r1, r3
 80016ca:	4620      	mov	r0, r4
 80016cc:	f7ff f960 	bl	8000990 <__aeabi_fsub>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fc2c 	bl	8000f30 <__aeabi_f2uiz>
 80016d8:	4603      	mov	r3, r0
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	4b4b      	ldr	r3, [pc, #300]	; (800180c <main+0x29c>)
 80016de:	701a      	strb	r2, [r3, #0]
  				sprintf(strCopy3, "%d.%d F", TFI, TFD);
 80016e0:	4b49      	ldr	r3, [pc, #292]	; (8001808 <main+0x298>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b49      	ldr	r3, [pc, #292]	; (800180c <main+0x29c>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	4949      	ldr	r1, [pc, #292]	; (8001810 <main+0x2a0>)
 80016ec:	4849      	ldr	r0, [pc, #292]	; (8001814 <main+0x2a4>)
 80016ee:	f002 f979 	bl	80039e4 <siprintf>
  				RHI = RH;  // Relative humidity integral
 80016f2:	4b44      	ldr	r3, [pc, #272]	; (8001804 <main+0x294>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fc1a 	bl	8000f30 <__aeabi_f2uiz>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b35      	ldr	r3, [pc, #212]	; (80017d8 <main+0x268>)
 8001702:	701a      	strb	r2, [r3, #0]
  				RHD = RH * 10 - RHI * 10; // Relative humidity decimal
 8001704:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <main+0x294>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	493d      	ldr	r1, [pc, #244]	; (8001800 <main+0x290>)
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fa4a 	bl	8000ba4 <__aeabi_fmul>
 8001710:	4603      	mov	r3, r0
 8001712:	461c      	mov	r4, r3
 8001714:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <main+0x268>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff f9ea 	bl	8000afc <__aeabi_i2f>
 8001728:	4603      	mov	r3, r0
 800172a:	4619      	mov	r1, r3
 800172c:	4620      	mov	r0, r4
 800172e:	f7ff f92f 	bl	8000990 <__aeabi_fsub>
 8001732:	4603      	mov	r3, r0
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fbfb 	bl	8000f30 <__aeabi_f2uiz>
 800173a:	4603      	mov	r3, r0
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b27      	ldr	r3, [pc, #156]	; (80017dc <main+0x26c>)
 8001740:	701a      	strb	r2, [r3, #0]
  				sprintf(strCopy3, "%d.%d %%  ", RHI, RHD);
 8001742:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <main+0x268>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	4b24      	ldr	r3, [pc, #144]	; (80017dc <main+0x26c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4932      	ldr	r1, [pc, #200]	; (8001818 <main+0x2a8>)
 800174e:	4831      	ldr	r0, [pc, #196]	; (8001814 <main+0x2a4>)
 8001750:	f002 f948 	bl	80039e4 <siprintf>
  				if (tCelsius < 0) {
 8001754:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <main+0x280>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f04f 0100 	mov.w	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fbbf 	bl	8000ee0 <__aeabi_fcmplt>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d05f      	beq.n	8001828 <main+0x2b8>
  					TCI = tCelsius * (-1);  // Celsius integral
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <main+0x280>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fbdd 	bl	8000f30 <__aeabi_f2uiz>
 8001776:	4603      	mov	r3, r0
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <main+0x270>)
 800177c:	701a      	strb	r2, [r3, #0]
  					TCD = tCelsius * (-10) - TCI * 10; // Celsius decimal
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <main+0x280>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4926      	ldr	r1, [pc, #152]	; (800181c <main+0x2ac>)
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fa0d 	bl	8000ba4 <__aeabi_fmul>
 800178a:	4603      	mov	r3, r0
 800178c:	461c      	mov	r4, r3
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <main+0x270>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff f9ad 	bl	8000afc <__aeabi_i2f>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4619      	mov	r1, r3
 80017a6:	4620      	mov	r0, r4
 80017a8:	f7ff f8f2 	bl	8000990 <__aeabi_fsub>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fbbe 	bl	8000f30 <__aeabi_f2uiz>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <main+0x274>)
 80017ba:	701a      	strb	r2, [r3, #0]
  					sprintf(strCopy2, "-%d.%d C   ", TCI, TCD);
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <main+0x270>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <main+0x274>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	4916      	ldr	r1, [pc, #88]	; (8001820 <main+0x2b0>)
 80017c8:	4816      	ldr	r0, [pc, #88]	; (8001824 <main+0x2b4>)
 80017ca:	f002 f90b 	bl	80039e4 <siprintf>
 80017ce:	e05c      	b.n	800188a <main+0x31a>
 80017d0:	08004300 	.word	0x08004300
 80017d4:	200000f8 	.word	0x200000f8
 80017d8:	20000140 	.word	0x20000140
 80017dc:	20000141 	.word	0x20000141
 80017e0:	20000142 	.word	0x20000142
 80017e4:	20000143 	.word	0x20000143
 80017e8:	20000144 	.word	0x20000144
 80017ec:	40240000 	.word	0x40240000
 80017f0:	20000150 	.word	0x20000150
 80017f4:	41100000 	.word	0x41100000
 80017f8:	40a00000 	.word	0x40a00000
 80017fc:	20000154 	.word	0x20000154
 8001800:	41200000 	.word	0x41200000
 8001804:	20000158 	.word	0x20000158
 8001808:	2000015c 	.word	0x2000015c
 800180c:	2000015d 	.word	0x2000015d
 8001810:	0800430c 	.word	0x0800430c
 8001814:	20000180 	.word	0x20000180
 8001818:	08004314 	.word	0x08004314
 800181c:	c1200000 	.word	0xc1200000
 8001820:	08004320 	.word	0x08004320
 8001824:	20000170 	.word	0x20000170
  				} else {
  					TCI = tCelsius;  // Celsius integral
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <main+0x350>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fb7f 	bl	8000f30 <__aeabi_f2uiz>
 8001832:	4603      	mov	r3, r0
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <main+0x354>)
 8001838:	701a      	strb	r2, [r3, #0]
  					TCD = tCelsius * 10 - TCI * 10; // Celsius decimal
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <main+0x350>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4922      	ldr	r1, [pc, #136]	; (80018c8 <main+0x358>)
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff f9af 	bl	8000ba4 <__aeabi_fmul>
 8001846:	4603      	mov	r3, r0
 8001848:	461c      	mov	r4, r3
 800184a:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <main+0x354>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff f94f 	bl	8000afc <__aeabi_i2f>
 800185e:	4603      	mov	r3, r0
 8001860:	4619      	mov	r1, r3
 8001862:	4620      	mov	r0, r4
 8001864:	f7ff f894 	bl	8000990 <__aeabi_fsub>
 8001868:	4603      	mov	r3, r0
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fb60 	bl	8000f30 <__aeabi_f2uiz>
 8001870:	4603      	mov	r3, r0
 8001872:	b2da      	uxtb	r2, r3
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <main+0x35c>)
 8001876:	701a      	strb	r2, [r3, #0]
  					sprintf(strCopy2, "%d.%d C   ", TCI, TCD);
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <main+0x354>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <main+0x35c>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	4913      	ldr	r1, [pc, #76]	; (80018d0 <main+0x360>)
 8001884:	4813      	ldr	r0, [pc, #76]	; (80018d4 <main+0x364>)
 8001886:	f002 f8ad 	bl	80039e4 <siprintf>
  				}
  				HD44780_SetCursor(5, 0);
 800188a:	2100      	movs	r1, #0
 800188c:	2005      	movs	r0, #5
 800188e:	f7ff fc09 	bl	80010a4 <HD44780_SetCursor>
  				HD44780_PrintStr(strCopy1);
 8001892:	4811      	ldr	r0, [pc, #68]	; (80018d8 <main+0x368>)
 8001894:	f7ff fc77 	bl	8001186 <HD44780_PrintStr>
  				HD44780_SetCursor(0, 1);
 8001898:	2101      	movs	r1, #1
 800189a:	2000      	movs	r0, #0
 800189c:	f7ff fc02 	bl	80010a4 <HD44780_SetCursor>
  				HD44780_PrintStr(strCopy2);
 80018a0:	480c      	ldr	r0, [pc, #48]	; (80018d4 <main+0x364>)
 80018a2:	f7ff fc70 	bl	8001186 <HD44780_PrintStr>
  				HD44780_SetCursor(10, 1);
 80018a6:	2101      	movs	r1, #1
 80018a8:	200a      	movs	r0, #10
 80018aa:	f7ff fbfb 	bl	80010a4 <HD44780_SetCursor>
  				HD44780_PrintStr(strCopy3);
 80018ae:	480b      	ldr	r0, [pc, #44]	; (80018dc <main+0x36c>)
 80018b0:	f7ff fc69 	bl	8001186 <HD44780_PrintStr>
  			}
  		}
  		HAL_Delay(500);
 80018b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018b8:	f000 faa2 	bl	8001e00 <HAL_Delay>
  		if (DHT11_Start()) {
 80018bc:	e66d      	b.n	800159a <main+0x2a>
 80018be:	bf00      	nop
 80018c0:	20000150 	.word	0x20000150
 80018c4:	20000142 	.word	0x20000142
 80018c8:	41200000 	.word	0x41200000
 80018cc:	20000143 	.word	0x20000143
 80018d0:	0800432c 	.word	0x0800432c
 80018d4:	20000170 	.word	0x20000170
 80018d8:	20000160 	.word	0x20000160
 80018dc:	20000180 	.word	0x20000180

080018e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b090      	sub	sp, #64	; 0x40
 80018e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e6:	f107 0318 	add.w	r3, r7, #24
 80018ea:	2228      	movs	r2, #40	; 0x28
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f002 f870 	bl	80039d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001902:	2301      	movs	r3, #1
 8001904:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800190a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001910:	2301      	movs	r3, #1
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001914:	2302      	movs	r3, #2
 8001916:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800191c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800191e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001922:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001924:	f107 0318 	add.w	r3, r7, #24
 8001928:	4618      	mov	r0, r3
 800192a:	f001 f96f 	bl	8002c0c <HAL_RCC_OscConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001934:	f000 f8e4 	bl	8001b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001938:	230f      	movs	r3, #15
 800193a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193c:	2302      	movs	r3, #2
 800193e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001948:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2102      	movs	r1, #2
 8001952:	4618      	mov	r0, r3
 8001954:	f001 fbdc 	bl	8003110 <HAL_RCC_ClockConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800195e:	f000 f8cf 	bl	8001b00 <Error_Handler>
  }
}
 8001962:	bf00      	nop
 8001964:	3740      	adds	r7, #64	; 0x40
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <MX_I2C1_Init+0x50>)
 8001972:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <MX_I2C1_Init+0x54>)
 8001974:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <MX_I2C1_Init+0x50>)
 8001978:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <MX_I2C1_Init+0x58>)
 800197a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <MX_I2C1_Init+0x50>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <MX_I2C1_Init+0x50>)
 8001984:	2200      	movs	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <MX_I2C1_Init+0x50>)
 800198a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800198e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001990:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <MX_I2C1_Init+0x50>)
 8001992:	2200      	movs	r2, #0
 8001994:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <MX_I2C1_Init+0x50>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <MX_I2C1_Init+0x50>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <MX_I2C1_Init+0x50>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019a8:	4804      	ldr	r0, [pc, #16]	; (80019bc <MX_I2C1_Init+0x50>)
 80019aa:	f000 fce5 	bl	8002378 <HAL_I2C_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019b4:	f000 f8a4 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200000a4 	.word	0x200000a4
 80019c0:	40005400 	.word	0x40005400
 80019c4:	000186a0 	.word	0x000186a0

080019c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019dc:	463b      	mov	r3, r7
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <MX_TIM1_Init+0x98>)
 80019e6:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <MX_TIM1_Init+0x9c>)
 80019e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <MX_TIM1_Init+0x98>)
 80019ec:	2247      	movs	r2, #71	; 0x47
 80019ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <MX_TIM1_Init+0x98>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019f6:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <MX_TIM1_Init+0x98>)
 80019f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <MX_TIM1_Init+0x98>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <MX_TIM1_Init+0x98>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <MX_TIM1_Init+0x98>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a10:	4813      	ldr	r0, [pc, #76]	; (8001a60 <MX_TIM1_Init+0x98>)
 8001a12:	f001 fd01 	bl	8003418 <HAL_TIM_Base_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a1c:	f000 f870 	bl	8001b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a26:	f107 0308 	add.w	r3, r7, #8
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480c      	ldr	r0, [pc, #48]	; (8001a60 <MX_TIM1_Init+0x98>)
 8001a2e:	f001 fd8d 	bl	800354c <HAL_TIM_ConfigClockSource>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a38:	f000 f862 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a44:	463b      	mov	r3, r7
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	; (8001a60 <MX_TIM1_Init+0x98>)
 8001a4a:	f001 ff3b 	bl	80038c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a54:	f000 f854 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200000f8 	.word	0x200000f8
 8001a64:	40012c00 	.word	0x40012c00

08001a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <MX_GPIO_Init+0x90>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a1d      	ldr	r2, [pc, #116]	; (8001af8 <MX_GPIO_Init+0x90>)
 8001a82:	f043 0320 	orr.w	r3, r3, #32
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <MX_GPIO_Init+0x90>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0320 	and.w	r3, r3, #32
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <MX_GPIO_Init+0x90>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <MX_GPIO_Init+0x90>)
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <MX_GPIO_Init+0x90>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <MX_GPIO_Init+0x90>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	4a11      	ldr	r2, [pc, #68]	; (8001af8 <MX_GPIO_Init+0x90>)
 8001ab2:	f043 0308 	orr.w	r3, r3, #8
 8001ab6:	6193      	str	r3, [r2, #24]
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MX_GPIO_Init+0x90>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aca:	480c      	ldr	r0, [pc, #48]	; (8001afc <MX_GPIO_Init+0x94>)
 8001acc:	f000 fc3b 	bl	8002346 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae2:	f107 0310 	add.w	r3, r7, #16
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4804      	ldr	r0, [pc, #16]	; (8001afc <MX_GPIO_Init+0x94>)
 8001aea:	f000 fa91 	bl	8002010 <HAL_GPIO_Init>

}
 8001aee:	bf00      	nop
 8001af0:	3720      	adds	r7, #32
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010c00 	.word	0x40010c00

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <Error_Handler+0x8>
	...

08001b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6193      	str	r3, [r2, #24]
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b34:	61d3      	str	r3, [r2, #28]
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_MspInit+0x60>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_MspInit+0x60>)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010000 	.word	0x40010000

08001b70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a15      	ldr	r2, [pc, #84]	; (8001be0 <HAL_I2C_MspInit+0x70>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d123      	bne.n	8001bd8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <HAL_I2C_MspInit+0x74>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <HAL_I2C_MspInit+0x74>)
 8001b96:	f043 0308 	orr.w	r3, r3, #8
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_I2C_MspInit+0x74>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba8:	23c0      	movs	r3, #192	; 0xc0
 8001baa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bac:	2312      	movs	r3, #18
 8001bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	4619      	mov	r1, r3
 8001bba:	480b      	ldr	r0, [pc, #44]	; (8001be8 <HAL_I2C_MspInit+0x78>)
 8001bbc:	f000 fa28 	bl	8002010 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_I2C_MspInit+0x74>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <HAL_I2C_MspInit+0x74>)
 8001bc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bca:	61d3      	str	r3, [r2, #28]
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_I2C_MspInit+0x74>)
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bd8:	bf00      	nop
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40005400 	.word	0x40005400
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010c00 	.word	0x40010c00

08001bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <HAL_TIM_Base_MspInit+0x34>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10b      	bne.n	8001c16 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_TIM_Base_MspInit+0x38>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <HAL_TIM_Base_MspInit+0x38>)
 8001c04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c08:	6193      	str	r3, [r2, #24]
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_TIM_Base_MspInit+0x38>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	40012c00 	.word	0x40012c00
 8001c24:	40021000 	.word	0x40021000

08001c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <NMI_Handler+0x4>

08001c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c32:	e7fe      	b.n	8001c32 <HardFault_Handler+0x4>

08001c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <MemManage_Handler+0x4>

08001c3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3e:	e7fe      	b.n	8001c3e <BusFault_Handler+0x4>

08001c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <UsageFault_Handler+0x4>

08001c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr

08001c6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c6e:	f000 f8ab 	bl	8001dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f001 fe6a 	bl	8003980 <__errno>
 8001cac:	4603      	mov	r3, r0
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <_sbrk+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20005000 	.word	0x20005000
 8001cd8:	00000400 	.word	0x00000400
 8001cdc:	20000190 	.word	0x20000190
 8001ce0:	200001a8 	.word	0x200001a8

08001ce4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf0:	480c      	ldr	r0, [pc, #48]	; (8001d24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cf2:	490d      	ldr	r1, [pc, #52]	; (8001d28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf8:	e002      	b.n	8001d00 <LoopCopyDataInit>

08001cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfe:	3304      	adds	r3, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d04:	d3f9      	bcc.n	8001cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d08:	4c0a      	ldr	r4, [pc, #40]	; (8001d34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d0c:	e001      	b.n	8001d12 <LoopFillZerobss>

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d10:	3204      	adds	r2, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d16:	f7ff ffe5 	bl	8001ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f001 fe37 	bl	800398c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d1e:	f7ff fc27 	bl	8001570 <main>
  bx lr
 8001d22:	4770      	bx	lr
  ldr r0, =_sdata
 8001d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d28:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001d2c:	0800439c 	.word	0x0800439c
  ldr r2, =_sbss
 8001d30:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001d34:	200001a8 	.word	0x200001a8

08001d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d38:	e7fe      	b.n	8001d38 <ADC1_2_IRQHandler>
	...

08001d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_Init+0x28>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <HAL_Init+0x28>)
 8001d46:	f043 0310 	orr.w	r3, r3, #16
 8001d4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	f000 f92b 	bl	8001fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d52:	200f      	movs	r0, #15
 8001d54:	f000 f808 	bl	8001d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d58:	f7ff fed8 	bl	8001b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40022000 	.word	0x40022000

08001d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_InitTick+0x54>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_InitTick+0x58>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f935 	bl	8001ff6 <HAL_SYSTICK_Config>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00e      	b.n	8001db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b0f      	cmp	r3, #15
 8001d9a:	d80a      	bhi.n	8001db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f000 f90b 	bl	8001fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da8:	4a06      	ldr	r2, [pc, #24]	; (8001dc4 <HAL_InitTick+0x5c>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e000      	b.n	8001db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000010 	.word	0x20000010
 8001dc0:	20000018 	.word	0x20000018
 8001dc4:	20000014 	.word	0x20000014

08001dc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_IncTick+0x1c>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_IncTick+0x20>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a03      	ldr	r2, [pc, #12]	; (8001de8 <HAL_IncTick+0x20>)
 8001dda:	6013      	str	r3, [r2, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	20000018 	.word	0x20000018
 8001de8:	20000194 	.word	0x20000194

08001dec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return uwTick;
 8001df0:	4b02      	ldr	r3, [pc, #8]	; (8001dfc <HAL_GetTick+0x10>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	20000194 	.word	0x20000194

08001e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e08:	f7ff fff0 	bl	8001dec <HAL_GetTick>
 8001e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d005      	beq.n	8001e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_Delay+0x44>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e26:	bf00      	nop
 8001e28:	f7ff ffe0 	bl	8001dec <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d8f7      	bhi.n	8001e28 <HAL_Delay+0x28>
  {
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000018 	.word	0x20000018

08001e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e64:	4013      	ands	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7a:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	60d3      	str	r3, [r2, #12]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 0307 	and.w	r3, r3, #7
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	6039      	str	r1, [r7, #0]
 8001eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	db0a      	blt.n	8001ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	490c      	ldr	r1, [pc, #48]	; (8001ef8 <__NVIC_SetPriority+0x4c>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	0112      	lsls	r2, r2, #4
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	440b      	add	r3, r1
 8001ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed4:	e00a      	b.n	8001eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4908      	ldr	r1, [pc, #32]	; (8001efc <__NVIC_SetPriority+0x50>)
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	3b04      	subs	r3, #4
 8001ee4:	0112      	lsls	r2, r2, #4
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	440b      	add	r3, r1
 8001eea:	761a      	strb	r2, [r3, #24]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	e000e100 	.word	0xe000e100
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b089      	sub	sp, #36	; 0x24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f1c3 0307 	rsb	r3, r3, #7
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	bf28      	it	cs
 8001f1e:	2304      	movcs	r3, #4
 8001f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3304      	adds	r3, #4
 8001f26:	2b06      	cmp	r3, #6
 8001f28:	d902      	bls.n	8001f30 <NVIC_EncodePriority+0x30>
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3b03      	subs	r3, #3
 8001f2e:	e000      	b.n	8001f32 <NVIC_EncodePriority+0x32>
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	f04f 32ff 	mov.w	r2, #4294967295
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	401a      	ands	r2, r3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f48:	f04f 31ff 	mov.w	r1, #4294967295
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	43d9      	mvns	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	4313      	orrs	r3, r2
         );
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3724      	adds	r7, #36	; 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f74:	d301      	bcc.n	8001f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00f      	b.n	8001f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <SysTick_Config+0x40>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f82:	210f      	movs	r1, #15
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
 8001f88:	f7ff ff90 	bl	8001eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <SysTick_Config+0x40>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f92:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <SysTick_Config+0x40>)
 8001f94:	2207      	movs	r2, #7
 8001f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	e000e010 	.word	0xe000e010

08001fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ff49 	bl	8001e48 <__NVIC_SetPriorityGrouping>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b086      	sub	sp, #24
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd0:	f7ff ff5e 	bl	8001e90 <__NVIC_GetPriorityGrouping>
 8001fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	6978      	ldr	r0, [r7, #20]
 8001fdc:	f7ff ff90 	bl	8001f00 <NVIC_EncodePriority>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff5f 	bl	8001eac <__NVIC_SetPriority>
}
 8001fee:	bf00      	nop
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ffb0 	bl	8001f64 <SysTick_Config>
 8002004:	4603      	mov	r3, r0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002010:	b480      	push	{r7}
 8002012:	b08b      	sub	sp, #44	; 0x2c
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800201a:	2300      	movs	r3, #0
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002022:	e169      	b.n	80022f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002024:	2201      	movs	r2, #1
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	429a      	cmp	r2, r3
 800203e:	f040 8158 	bne.w	80022f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4a9a      	ldr	r2, [pc, #616]	; (80022b0 <HAL_GPIO_Init+0x2a0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d05e      	beq.n	800210a <HAL_GPIO_Init+0xfa>
 800204c:	4a98      	ldr	r2, [pc, #608]	; (80022b0 <HAL_GPIO_Init+0x2a0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d875      	bhi.n	800213e <HAL_GPIO_Init+0x12e>
 8002052:	4a98      	ldr	r2, [pc, #608]	; (80022b4 <HAL_GPIO_Init+0x2a4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d058      	beq.n	800210a <HAL_GPIO_Init+0xfa>
 8002058:	4a96      	ldr	r2, [pc, #600]	; (80022b4 <HAL_GPIO_Init+0x2a4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d86f      	bhi.n	800213e <HAL_GPIO_Init+0x12e>
 800205e:	4a96      	ldr	r2, [pc, #600]	; (80022b8 <HAL_GPIO_Init+0x2a8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d052      	beq.n	800210a <HAL_GPIO_Init+0xfa>
 8002064:	4a94      	ldr	r2, [pc, #592]	; (80022b8 <HAL_GPIO_Init+0x2a8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d869      	bhi.n	800213e <HAL_GPIO_Init+0x12e>
 800206a:	4a94      	ldr	r2, [pc, #592]	; (80022bc <HAL_GPIO_Init+0x2ac>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d04c      	beq.n	800210a <HAL_GPIO_Init+0xfa>
 8002070:	4a92      	ldr	r2, [pc, #584]	; (80022bc <HAL_GPIO_Init+0x2ac>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d863      	bhi.n	800213e <HAL_GPIO_Init+0x12e>
 8002076:	4a92      	ldr	r2, [pc, #584]	; (80022c0 <HAL_GPIO_Init+0x2b0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d046      	beq.n	800210a <HAL_GPIO_Init+0xfa>
 800207c:	4a90      	ldr	r2, [pc, #576]	; (80022c0 <HAL_GPIO_Init+0x2b0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d85d      	bhi.n	800213e <HAL_GPIO_Init+0x12e>
 8002082:	2b12      	cmp	r3, #18
 8002084:	d82a      	bhi.n	80020dc <HAL_GPIO_Init+0xcc>
 8002086:	2b12      	cmp	r3, #18
 8002088:	d859      	bhi.n	800213e <HAL_GPIO_Init+0x12e>
 800208a:	a201      	add	r2, pc, #4	; (adr r2, 8002090 <HAL_GPIO_Init+0x80>)
 800208c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002090:	0800210b 	.word	0x0800210b
 8002094:	080020e5 	.word	0x080020e5
 8002098:	080020f7 	.word	0x080020f7
 800209c:	08002139 	.word	0x08002139
 80020a0:	0800213f 	.word	0x0800213f
 80020a4:	0800213f 	.word	0x0800213f
 80020a8:	0800213f 	.word	0x0800213f
 80020ac:	0800213f 	.word	0x0800213f
 80020b0:	0800213f 	.word	0x0800213f
 80020b4:	0800213f 	.word	0x0800213f
 80020b8:	0800213f 	.word	0x0800213f
 80020bc:	0800213f 	.word	0x0800213f
 80020c0:	0800213f 	.word	0x0800213f
 80020c4:	0800213f 	.word	0x0800213f
 80020c8:	0800213f 	.word	0x0800213f
 80020cc:	0800213f 	.word	0x0800213f
 80020d0:	0800213f 	.word	0x0800213f
 80020d4:	080020ed 	.word	0x080020ed
 80020d8:	08002101 	.word	0x08002101
 80020dc:	4a79      	ldr	r2, [pc, #484]	; (80022c4 <HAL_GPIO_Init+0x2b4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d013      	beq.n	800210a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020e2:	e02c      	b.n	800213e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	623b      	str	r3, [r7, #32]
          break;
 80020ea:	e029      	b.n	8002140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	3304      	adds	r3, #4
 80020f2:	623b      	str	r3, [r7, #32]
          break;
 80020f4:	e024      	b.n	8002140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	3308      	adds	r3, #8
 80020fc:	623b      	str	r3, [r7, #32]
          break;
 80020fe:	e01f      	b.n	8002140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	330c      	adds	r3, #12
 8002106:	623b      	str	r3, [r7, #32]
          break;
 8002108:	e01a      	b.n	8002140 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d102      	bne.n	8002118 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002112:	2304      	movs	r3, #4
 8002114:	623b      	str	r3, [r7, #32]
          break;
 8002116:	e013      	b.n	8002140 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d105      	bne.n	800212c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002120:	2308      	movs	r3, #8
 8002122:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69fa      	ldr	r2, [r7, #28]
 8002128:	611a      	str	r2, [r3, #16]
          break;
 800212a:	e009      	b.n	8002140 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800212c:	2308      	movs	r3, #8
 800212e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	615a      	str	r2, [r3, #20]
          break;
 8002136:	e003      	b.n	8002140 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002138:	2300      	movs	r3, #0
 800213a:	623b      	str	r3, [r7, #32]
          break;
 800213c:	e000      	b.n	8002140 <HAL_GPIO_Init+0x130>
          break;
 800213e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2bff      	cmp	r3, #255	; 0xff
 8002144:	d801      	bhi.n	800214a <HAL_GPIO_Init+0x13a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	e001      	b.n	800214e <HAL_GPIO_Init+0x13e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3304      	adds	r3, #4
 800214e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	2bff      	cmp	r3, #255	; 0xff
 8002154:	d802      	bhi.n	800215c <HAL_GPIO_Init+0x14c>
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	e002      	b.n	8002162 <HAL_GPIO_Init+0x152>
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	3b08      	subs	r3, #8
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	210f      	movs	r1, #15
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	fa01 f303 	lsl.w	r3, r1, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	401a      	ands	r2, r3
 8002174:	6a39      	ldr	r1, [r7, #32]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	431a      	orrs	r2, r3
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 80b1 	beq.w	80022f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002190:	4b4d      	ldr	r3, [pc, #308]	; (80022c8 <HAL_GPIO_Init+0x2b8>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	4a4c      	ldr	r2, [pc, #304]	; (80022c8 <HAL_GPIO_Init+0x2b8>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6193      	str	r3, [r2, #24]
 800219c:	4b4a      	ldr	r3, [pc, #296]	; (80022c8 <HAL_GPIO_Init+0x2b8>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021a8:	4a48      	ldr	r2, [pc, #288]	; (80022cc <HAL_GPIO_Init+0x2bc>)
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	3302      	adds	r3, #2
 80021b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	220f      	movs	r2, #15
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4013      	ands	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a40      	ldr	r2, [pc, #256]	; (80022d0 <HAL_GPIO_Init+0x2c0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d013      	beq.n	80021fc <HAL_GPIO_Init+0x1ec>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a3f      	ldr	r2, [pc, #252]	; (80022d4 <HAL_GPIO_Init+0x2c4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d00d      	beq.n	80021f8 <HAL_GPIO_Init+0x1e8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a3e      	ldr	r2, [pc, #248]	; (80022d8 <HAL_GPIO_Init+0x2c8>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d007      	beq.n	80021f4 <HAL_GPIO_Init+0x1e4>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a3d      	ldr	r2, [pc, #244]	; (80022dc <HAL_GPIO_Init+0x2cc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d101      	bne.n	80021f0 <HAL_GPIO_Init+0x1e0>
 80021ec:	2303      	movs	r3, #3
 80021ee:	e006      	b.n	80021fe <HAL_GPIO_Init+0x1ee>
 80021f0:	2304      	movs	r3, #4
 80021f2:	e004      	b.n	80021fe <HAL_GPIO_Init+0x1ee>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e002      	b.n	80021fe <HAL_GPIO_Init+0x1ee>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <HAL_GPIO_Init+0x1ee>
 80021fc:	2300      	movs	r3, #0
 80021fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002200:	f002 0203 	and.w	r2, r2, #3
 8002204:	0092      	lsls	r2, r2, #2
 8002206:	4093      	lsls	r3, r2
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800220e:	492f      	ldr	r1, [pc, #188]	; (80022cc <HAL_GPIO_Init+0x2bc>)
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3302      	adds	r3, #2
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d006      	beq.n	8002236 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002228:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <HAL_GPIO_Init+0x2d0>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	492c      	ldr	r1, [pc, #176]	; (80022e0 <HAL_GPIO_Init+0x2d0>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
 8002234:	e006      	b.n	8002244 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002236:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <HAL_GPIO_Init+0x2d0>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	43db      	mvns	r3, r3
 800223e:	4928      	ldr	r1, [pc, #160]	; (80022e0 <HAL_GPIO_Init+0x2d0>)
 8002240:	4013      	ands	r3, r2
 8002242:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d006      	beq.n	800225e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002250:	4b23      	ldr	r3, [pc, #140]	; (80022e0 <HAL_GPIO_Init+0x2d0>)
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	4922      	ldr	r1, [pc, #136]	; (80022e0 <HAL_GPIO_Init+0x2d0>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
 800225c:	e006      	b.n	800226c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <HAL_GPIO_Init+0x2d0>)
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	43db      	mvns	r3, r3
 8002266:	491e      	ldr	r1, [pc, #120]	; (80022e0 <HAL_GPIO_Init+0x2d0>)
 8002268:	4013      	ands	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d006      	beq.n	8002286 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002278:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <HAL_GPIO_Init+0x2d0>)
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	4918      	ldr	r1, [pc, #96]	; (80022e0 <HAL_GPIO_Init+0x2d0>)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	608b      	str	r3, [r1, #8]
 8002284:	e006      	b.n	8002294 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002286:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <HAL_GPIO_Init+0x2d0>)
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	43db      	mvns	r3, r3
 800228e:	4914      	ldr	r1, [pc, #80]	; (80022e0 <HAL_GPIO_Init+0x2d0>)
 8002290:	4013      	ands	r3, r2
 8002292:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d021      	beq.n	80022e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <HAL_GPIO_Init+0x2d0>)
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	490e      	ldr	r1, [pc, #56]	; (80022e0 <HAL_GPIO_Init+0x2d0>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60cb      	str	r3, [r1, #12]
 80022ac:	e021      	b.n	80022f2 <HAL_GPIO_Init+0x2e2>
 80022ae:	bf00      	nop
 80022b0:	10320000 	.word	0x10320000
 80022b4:	10310000 	.word	0x10310000
 80022b8:	10220000 	.word	0x10220000
 80022bc:	10210000 	.word	0x10210000
 80022c0:	10120000 	.word	0x10120000
 80022c4:	10110000 	.word	0x10110000
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40010000 	.word	0x40010000
 80022d0:	40010800 	.word	0x40010800
 80022d4:	40010c00 	.word	0x40010c00
 80022d8:	40011000 	.word	0x40011000
 80022dc:	40011400 	.word	0x40011400
 80022e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_GPIO_Init+0x304>)
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	4909      	ldr	r1, [pc, #36]	; (8002314 <HAL_GPIO_Init+0x304>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	3301      	adds	r3, #1
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	f47f ae8e 	bne.w	8002024 <HAL_GPIO_Init+0x14>
  }
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	372c      	adds	r7, #44	; 0x2c
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	40010400 	.word	0x40010400

08002318 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	887b      	ldrh	r3, [r7, #2]
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
 8002334:	e001      	b.n	800233a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800233a:	7bfb      	ldrb	r3, [r7, #15]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr

08002346 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	460b      	mov	r3, r1
 8002350:	807b      	strh	r3, [r7, #2]
 8002352:	4613      	mov	r3, r2
 8002354:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002356:	787b      	ldrb	r3, [r7, #1]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800235c:	887a      	ldrh	r2, [r7, #2]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002362:	e003      	b.n	800236c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002364:	887b      	ldrh	r3, [r7, #2]
 8002366:	041a      	lsls	r2, r3, #16
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	611a      	str	r2, [r3, #16]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr
	...

08002378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e12b      	b.n	80025e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff fbe6 	bl	8001b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2224      	movs	r2, #36	; 0x24
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0201 	bic.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023dc:	f000 ffea 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 80023e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4a81      	ldr	r2, [pc, #516]	; (80025ec <HAL_I2C_Init+0x274>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d807      	bhi.n	80023fc <HAL_I2C_Init+0x84>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4a80      	ldr	r2, [pc, #512]	; (80025f0 <HAL_I2C_Init+0x278>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	bf94      	ite	ls
 80023f4:	2301      	movls	r3, #1
 80023f6:	2300      	movhi	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	e006      	b.n	800240a <HAL_I2C_Init+0x92>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4a7d      	ldr	r2, [pc, #500]	; (80025f4 <HAL_I2C_Init+0x27c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	bf94      	ite	ls
 8002404:	2301      	movls	r3, #1
 8002406:	2300      	movhi	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e0e7      	b.n	80025e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4a78      	ldr	r2, [pc, #480]	; (80025f8 <HAL_I2C_Init+0x280>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	0c9b      	lsrs	r3, r3, #18
 800241c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	430a      	orrs	r2, r1
 8002430:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4a6a      	ldr	r2, [pc, #424]	; (80025ec <HAL_I2C_Init+0x274>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d802      	bhi.n	800244c <HAL_I2C_Init+0xd4>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	3301      	adds	r3, #1
 800244a:	e009      	b.n	8002460 <HAL_I2C_Init+0xe8>
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	4a69      	ldr	r2, [pc, #420]	; (80025fc <HAL_I2C_Init+0x284>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	099b      	lsrs	r3, r3, #6
 800245e:	3301      	adds	r3, #1
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	430b      	orrs	r3, r1
 8002466:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002472:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	495c      	ldr	r1, [pc, #368]	; (80025ec <HAL_I2C_Init+0x274>)
 800247c:	428b      	cmp	r3, r1
 800247e:	d819      	bhi.n	80024b4 <HAL_I2C_Init+0x13c>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1e59      	subs	r1, r3, #1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	fbb1 f3f3 	udiv	r3, r1, r3
 800248e:	1c59      	adds	r1, r3, #1
 8002490:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002494:	400b      	ands	r3, r1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_I2C_Init+0x138>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1e59      	subs	r1, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a8:	3301      	adds	r3, #1
 80024aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ae:	e051      	b.n	8002554 <HAL_I2C_Init+0x1dc>
 80024b0:	2304      	movs	r3, #4
 80024b2:	e04f      	b.n	8002554 <HAL_I2C_Init+0x1dc>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d111      	bne.n	80024e0 <HAL_I2C_Init+0x168>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1e58      	subs	r0, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	440b      	add	r3, r1
 80024ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ce:	3301      	adds	r3, #1
 80024d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	e012      	b.n	8002506 <HAL_I2C_Init+0x18e>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1e58      	subs	r0, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	0099      	lsls	r1, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f6:	3301      	adds	r3, #1
 80024f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf0c      	ite	eq
 8002500:	2301      	moveq	r3, #1
 8002502:	2300      	movne	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Init+0x196>
 800250a:	2301      	movs	r3, #1
 800250c:	e022      	b.n	8002554 <HAL_I2C_Init+0x1dc>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10e      	bne.n	8002534 <HAL_I2C_Init+0x1bc>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1e58      	subs	r0, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6859      	ldr	r1, [r3, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	440b      	add	r3, r1
 8002524:	fbb0 f3f3 	udiv	r3, r0, r3
 8002528:	3301      	adds	r3, #1
 800252a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002532:	e00f      	b.n	8002554 <HAL_I2C_Init+0x1dc>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1e58      	subs	r0, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	0099      	lsls	r1, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	fbb0 f3f3 	udiv	r3, r0, r3
 800254a:	3301      	adds	r3, #1
 800254c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002550:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	6809      	ldr	r1, [r1, #0]
 8002558:	4313      	orrs	r3, r2
 800255a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69da      	ldr	r2, [r3, #28]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002582:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6911      	ldr	r1, [r2, #16]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68d2      	ldr	r2, [r2, #12]
 800258e:	4311      	orrs	r1, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	430b      	orrs	r3, r1
 8002596:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	000186a0 	.word	0x000186a0
 80025f0:	001e847f 	.word	0x001e847f
 80025f4:	003d08ff 	.word	0x003d08ff
 80025f8:	431bde83 	.word	0x431bde83
 80025fc:	10624dd3 	.word	0x10624dd3

08002600 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af02      	add	r7, sp, #8
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	461a      	mov	r2, r3
 800260c:	460b      	mov	r3, r1
 800260e:	817b      	strh	r3, [r7, #10]
 8002610:	4613      	mov	r3, r2
 8002612:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff fbea 	bl	8001dec <HAL_GetTick>
 8002618:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b20      	cmp	r3, #32
 8002624:	f040 80e0 	bne.w	80027e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2319      	movs	r3, #25
 800262e:	2201      	movs	r2, #1
 8002630:	4970      	ldr	r1, [pc, #448]	; (80027f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f964 	bl	8002900 <I2C_WaitOnFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800263e:	2302      	movs	r3, #2
 8002640:	e0d3      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_I2C_Master_Transmit+0x50>
 800264c:	2302      	movs	r3, #2
 800264e:	e0cc      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b01      	cmp	r3, #1
 8002664:	d007      	beq.n	8002676 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002684:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2221      	movs	r2, #33	; 0x21
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2210      	movs	r2, #16
 8002692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	893a      	ldrh	r2, [r7, #8]
 80026a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4a50      	ldr	r2, [pc, #320]	; (80027f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026b8:	8979      	ldrh	r1, [r7, #10]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	6a3a      	ldr	r2, [r7, #32]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f89c 	bl	80027fc <I2C_MasterRequestWrite>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e08d      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026e4:	e066      	b.n	80027b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	6a39      	ldr	r1, [r7, #32]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 f9de 	bl	8002aac <I2C_WaitOnTXEFlagUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00d      	beq.n	8002712 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d107      	bne.n	800270e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e06b      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b04      	cmp	r3, #4
 800274e:	d11b      	bne.n	8002788 <HAL_I2C_Master_Transmit+0x188>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002754:	2b00      	cmp	r3, #0
 8002756:	d017      	beq.n	8002788 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	781a      	ldrb	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	6a39      	ldr	r1, [r7, #32]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f9ce 	bl	8002b2e <I2C_WaitOnBTFFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00d      	beq.n	80027b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	2b04      	cmp	r3, #4
 800279e:	d107      	bne.n	80027b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e01a      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d194      	bne.n	80026e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	e000      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027e8:	2302      	movs	r3, #2
  }
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	00100002 	.word	0x00100002
 80027f8:	ffff0000 	.word	0xffff0000

080027fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	460b      	mov	r3, r1
 800280a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b08      	cmp	r3, #8
 8002816:	d006      	beq.n	8002826 <I2C_MasterRequestWrite+0x2a>
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d003      	beq.n	8002826 <I2C_MasterRequestWrite+0x2a>
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002824:	d108      	bne.n	8002838 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	e00b      	b.n	8002850 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	2b12      	cmp	r3, #18
 800283e:	d107      	bne.n	8002850 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800284e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f84f 	bl	8002900 <I2C_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00d      	beq.n	8002884 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002876:	d103      	bne.n	8002880 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800287e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e035      	b.n	80028f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800288c:	d108      	bne.n	80028a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800288e:	897b      	ldrh	r3, [r7, #10]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800289c:	611a      	str	r2, [r3, #16]
 800289e:	e01b      	b.n	80028d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028a0:	897b      	ldrh	r3, [r7, #10]
 80028a2:	11db      	asrs	r3, r3, #7
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f003 0306 	and.w	r3, r3, #6
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f063 030f 	orn	r3, r3, #15
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	490e      	ldr	r1, [pc, #56]	; (80028f8 <I2C_MasterRequestWrite+0xfc>)
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f875 	bl	80029ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e010      	b.n	80028f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028ce:	897b      	ldrh	r3, [r7, #10]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	4907      	ldr	r1, [pc, #28]	; (80028fc <I2C_MasterRequestWrite+0x100>)
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f865 	bl	80029ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	00010008 	.word	0x00010008
 80028fc:	00010002 	.word	0x00010002

08002900 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002910:	e025      	b.n	800295e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d021      	beq.n	800295e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291a:	f7ff fa67 	bl	8001dec <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d302      	bcc.n	8002930 <I2C_WaitOnFlagUntilTimeout+0x30>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d116      	bne.n	800295e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f043 0220 	orr.w	r2, r3, #32
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e023      	b.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d10d      	bne.n	8002984 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	43da      	mvns	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4013      	ands	r3, r2
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	bf0c      	ite	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	2300      	movne	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	e00c      	b.n	800299e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	43da      	mvns	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4013      	ands	r3, r2
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	bf0c      	ite	eq
 8002996:	2301      	moveq	r3, #1
 8002998:	2300      	movne	r3, #0
 800299a:	b2db      	uxtb	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d0b6      	beq.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029bc:	e051      	b.n	8002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029cc:	d123      	bne.n	8002a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f043 0204 	orr.w	r2, r3, #4
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e046      	b.n	8002aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d021      	beq.n	8002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1e:	f7ff f9e5 	bl	8001dec <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d302      	bcc.n	8002a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d116      	bne.n	8002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f043 0220 	orr.w	r2, r3, #32
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e020      	b.n	8002aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	0c1b      	lsrs	r3, r3, #16
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d10c      	bne.n	8002a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	43da      	mvns	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4013      	ands	r3, r2
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf14      	ite	ne
 8002a7e:	2301      	movne	r3, #1
 8002a80:	2300      	moveq	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	e00b      	b.n	8002a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	43da      	mvns	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	4013      	ands	r3, r2
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bf14      	ite	ne
 8002a98:	2301      	movne	r3, #1
 8002a9a:	2300      	moveq	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d18d      	bne.n	80029be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ab8:	e02d      	b.n	8002b16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f878 	bl	8002bb0 <I2C_IsAcknowledgeFailed>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e02d      	b.n	8002b26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad0:	d021      	beq.n	8002b16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad2:	f7ff f98b 	bl	8001dec <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d302      	bcc.n	8002ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d116      	bne.n	8002b16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f043 0220 	orr.w	r2, r3, #32
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e007      	b.n	8002b26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b20:	2b80      	cmp	r3, #128	; 0x80
 8002b22:	d1ca      	bne.n	8002aba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b3a:	e02d      	b.n	8002b98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f837 	bl	8002bb0 <I2C_IsAcknowledgeFailed>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e02d      	b.n	8002ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b52:	d021      	beq.n	8002b98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b54:	f7ff f94a 	bl	8001dec <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d302      	bcc.n	8002b6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d116      	bne.n	8002b98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f043 0220 	orr.w	r2, r3, #32
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e007      	b.n	8002ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d1ca      	bne.n	8002b3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc6:	d11b      	bne.n	8002c00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	f043 0204 	orr.w	r2, r3, #4
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e272      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 8087 	beq.w	8002d3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c2c:	4b92      	ldr	r3, [pc, #584]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 030c 	and.w	r3, r3, #12
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d00c      	beq.n	8002c52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c38:	4b8f      	ldr	r3, [pc, #572]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 030c 	and.w	r3, r3, #12
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d112      	bne.n	8002c6a <HAL_RCC_OscConfig+0x5e>
 8002c44:	4b8c      	ldr	r3, [pc, #560]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c50:	d10b      	bne.n	8002c6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c52:	4b89      	ldr	r3, [pc, #548]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d06c      	beq.n	8002d38 <HAL_RCC_OscConfig+0x12c>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d168      	bne.n	8002d38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e24c      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c72:	d106      	bne.n	8002c82 <HAL_RCC_OscConfig+0x76>
 8002c74:	4b80      	ldr	r3, [pc, #512]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a7f      	ldr	r2, [pc, #508]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	e02e      	b.n	8002ce0 <HAL_RCC_OscConfig+0xd4>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x98>
 8002c8a:	4b7b      	ldr	r3, [pc, #492]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a7a      	ldr	r2, [pc, #488]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b78      	ldr	r3, [pc, #480]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a77      	ldr	r2, [pc, #476]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	e01d      	b.n	8002ce0 <HAL_RCC_OscConfig+0xd4>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xbc>
 8002cae:	4b72      	ldr	r3, [pc, #456]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a71      	ldr	r2, [pc, #452]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	4b6f      	ldr	r3, [pc, #444]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a6e      	ldr	r2, [pc, #440]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	e00b      	b.n	8002ce0 <HAL_RCC_OscConfig+0xd4>
 8002cc8:	4b6b      	ldr	r3, [pc, #428]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a6a      	ldr	r2, [pc, #424]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	4b68      	ldr	r3, [pc, #416]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a67      	ldr	r2, [pc, #412]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d013      	beq.n	8002d10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7ff f880 	bl	8001dec <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf0:	f7ff f87c 	bl	8001dec <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b64      	cmp	r3, #100	; 0x64
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e200      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	4b5d      	ldr	r3, [pc, #372]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0xe4>
 8002d0e:	e014      	b.n	8002d3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7ff f86c 	bl	8001dec <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d18:	f7ff f868 	bl	8001dec <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e1ec      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2a:	4b53      	ldr	r3, [pc, #332]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x10c>
 8002d36:	e000      	b.n	8002d3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d063      	beq.n	8002e0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d46:	4b4c      	ldr	r3, [pc, #304]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00b      	beq.n	8002d6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d52:	4b49      	ldr	r3, [pc, #292]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d11c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x18c>
 8002d5e:	4b46      	ldr	r3, [pc, #280]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d116      	bne.n	8002d98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6a:	4b43      	ldr	r3, [pc, #268]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_RCC_OscConfig+0x176>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d001      	beq.n	8002d82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e1c0      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d82:	4b3d      	ldr	r3, [pc, #244]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4939      	ldr	r1, [pc, #228]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d96:	e03a      	b.n	8002e0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d020      	beq.n	8002de2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da0:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <HAL_RCC_OscConfig+0x270>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7ff f821 	bl	8001dec <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dae:	f7ff f81d 	bl	8001dec <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e1a1      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc0:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dcc:	4b2a      	ldr	r3, [pc, #168]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4927      	ldr	r1, [pc, #156]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	600b      	str	r3, [r1, #0]
 8002de0:	e015      	b.n	8002e0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de2:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <HAL_RCC_OscConfig+0x270>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7ff f800 	bl	8001dec <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df0:	f7fe fffc 	bl	8001dec <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e180      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d03a      	beq.n	8002e90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d019      	beq.n	8002e56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <HAL_RCC_OscConfig+0x274>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e28:	f7fe ffe0 	bl	8001dec <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e30:	f7fe ffdc 	bl	8001dec <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e160      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e42:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e4e:	2001      	movs	r0, #1
 8002e50:	f000 fac4 	bl	80033dc <RCC_Delay>
 8002e54:	e01c      	b.n	8002e90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <HAL_RCC_OscConfig+0x274>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5c:	f7fe ffc6 	bl	8001dec <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e62:	e00f      	b.n	8002e84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e64:	f7fe ffc2 	bl	8001dec <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d908      	bls.n	8002e84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e146      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	42420000 	.word	0x42420000
 8002e80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e84:	4b92      	ldr	r3, [pc, #584]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e9      	bne.n	8002e64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80a6 	beq.w	8002fea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea2:	4b8b      	ldr	r3, [pc, #556]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10d      	bne.n	8002eca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eae:	4b88      	ldr	r3, [pc, #544]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	4a87      	ldr	r2, [pc, #540]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	61d3      	str	r3, [r2, #28]
 8002eba:	4b85      	ldr	r3, [pc, #532]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eca:	4b82      	ldr	r3, [pc, #520]	; (80030d4 <HAL_RCC_OscConfig+0x4c8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d118      	bne.n	8002f08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed6:	4b7f      	ldr	r3, [pc, #508]	; (80030d4 <HAL_RCC_OscConfig+0x4c8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a7e      	ldr	r2, [pc, #504]	; (80030d4 <HAL_RCC_OscConfig+0x4c8>)
 8002edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe ff83 	bl	8001dec <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eea:	f7fe ff7f 	bl	8001dec <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b64      	cmp	r3, #100	; 0x64
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e103      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efc:	4b75      	ldr	r3, [pc, #468]	; (80030d4 <HAL_RCC_OscConfig+0x4c8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x312>
 8002f10:	4b6f      	ldr	r3, [pc, #444]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4a6e      	ldr	r2, [pc, #440]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6213      	str	r3, [r2, #32]
 8002f1c:	e02d      	b.n	8002f7a <HAL_RCC_OscConfig+0x36e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x334>
 8002f26:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4a69      	ldr	r2, [pc, #420]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	6213      	str	r3, [r2, #32]
 8002f32:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a66      	ldr	r2, [pc, #408]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	f023 0304 	bic.w	r3, r3, #4
 8002f3c:	6213      	str	r3, [r2, #32]
 8002f3e:	e01c      	b.n	8002f7a <HAL_RCC_OscConfig+0x36e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b05      	cmp	r3, #5
 8002f46:	d10c      	bne.n	8002f62 <HAL_RCC_OscConfig+0x356>
 8002f48:	4b61      	ldr	r3, [pc, #388]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	4a60      	ldr	r2, [pc, #384]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	f043 0304 	orr.w	r3, r3, #4
 8002f52:	6213      	str	r3, [r2, #32]
 8002f54:	4b5e      	ldr	r3, [pc, #376]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4a5d      	ldr	r2, [pc, #372]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	6213      	str	r3, [r2, #32]
 8002f60:	e00b      	b.n	8002f7a <HAL_RCC_OscConfig+0x36e>
 8002f62:	4b5b      	ldr	r3, [pc, #364]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	4a5a      	ldr	r2, [pc, #360]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	6213      	str	r3, [r2, #32]
 8002f6e:	4b58      	ldr	r3, [pc, #352]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4a57      	ldr	r2, [pc, #348]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	f023 0304 	bic.w	r3, r3, #4
 8002f78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d015      	beq.n	8002fae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f82:	f7fe ff33 	bl	8001dec <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f88:	e00a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fe ff2f 	bl	8001dec <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e0b1      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa0:	4b4b      	ldr	r3, [pc, #300]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0ee      	beq.n	8002f8a <HAL_RCC_OscConfig+0x37e>
 8002fac:	e014      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fae:	f7fe ff1d 	bl	8001dec <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb4:	e00a      	b.n	8002fcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb6:	f7fe ff19 	bl	8001dec <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e09b      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fcc:	4b40      	ldr	r3, [pc, #256]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1ee      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d105      	bne.n	8002fea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fde:	4b3c      	ldr	r3, [pc, #240]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	4a3b      	ldr	r2, [pc, #236]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 8087 	beq.w	8003102 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ff4:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d061      	beq.n	80030c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d146      	bne.n	8003096 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003008:	4b33      	ldr	r3, [pc, #204]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7fe feed 	bl	8001dec <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003016:	f7fe fee9 	bl	8001dec <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e06d      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003028:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f0      	bne.n	8003016 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800303c:	d108      	bne.n	8003050 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800303e:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	4921      	ldr	r1, [pc, #132]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 800304c:	4313      	orrs	r3, r2
 800304e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003050:	4b1f      	ldr	r3, [pc, #124]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a19      	ldr	r1, [r3, #32]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	430b      	orrs	r3, r1
 8003062:	491b      	ldr	r1, [pc, #108]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7fe febd 	bl	8001dec <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003076:	f7fe feb9 	bl	8001dec <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e03d      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x46a>
 8003094:	e035      	b.n	8003102 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe fea6 	bl	8001dec <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe fea2 	bl	8001dec <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e026      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x498>
 80030c2:	e01e      	b.n	8003102 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e019      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40007000 	.word	0x40007000
 80030d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_RCC_OscConfig+0x500>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d106      	bne.n	80030fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d001      	beq.n	8003102 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40021000 	.word	0x40021000

08003110 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0d0      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003124:	4b6a      	ldr	r3, [pc, #424]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d910      	bls.n	8003154 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003132:	4b67      	ldr	r3, [pc, #412]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 0207 	bic.w	r2, r3, #7
 800313a:	4965      	ldr	r1, [pc, #404]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003142:	4b63      	ldr	r3, [pc, #396]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0b8      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800316c:	4b59      	ldr	r3, [pc, #356]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4a58      	ldr	r2, [pc, #352]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003176:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003184:	4b53      	ldr	r3, [pc, #332]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4a52      	ldr	r2, [pc, #328]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 800318a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800318e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003190:	4b50      	ldr	r3, [pc, #320]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	494d      	ldr	r1, [pc, #308]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d040      	beq.n	8003230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d107      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d115      	bne.n	80031ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e07f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d107      	bne.n	80031de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ce:	4b41      	ldr	r3, [pc, #260]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e073      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031de:	4b3d      	ldr	r3, [pc, #244]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e06b      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ee:	4b39      	ldr	r3, [pc, #228]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f023 0203 	bic.w	r2, r3, #3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4936      	ldr	r1, [pc, #216]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003200:	f7fe fdf4 	bl	8001dec <HAL_GetTick>
 8003204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003206:	e00a      	b.n	800321e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003208:	f7fe fdf0 	bl	8001dec <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f241 3288 	movw	r2, #5000	; 0x1388
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e053      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321e:	4b2d      	ldr	r3, [pc, #180]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 020c 	and.w	r2, r3, #12
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	429a      	cmp	r2, r3
 800322e:	d1eb      	bne.n	8003208 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003230:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d210      	bcs.n	8003260 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323e:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 0207 	bic.w	r2, r3, #7
 8003246:	4922      	ldr	r1, [pc, #136]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	4313      	orrs	r3, r2
 800324c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e032      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800326c:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4916      	ldr	r1, [pc, #88]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	4313      	orrs	r3, r2
 800327c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	490e      	ldr	r1, [pc, #56]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	4313      	orrs	r3, r2
 800329c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800329e:	f000 f821 	bl	80032e4 <HAL_RCC_GetSysClockFreq>
 80032a2:	4602      	mov	r2, r0
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	490a      	ldr	r1, [pc, #40]	; (80032d8 <HAL_RCC_ClockConfig+0x1c8>)
 80032b0:	5ccb      	ldrb	r3, [r1, r3]
 80032b2:	fa22 f303 	lsr.w	r3, r2, r3
 80032b6:	4a09      	ldr	r2, [pc, #36]	; (80032dc <HAL_RCC_ClockConfig+0x1cc>)
 80032b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_RCC_ClockConfig+0x1d0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fd52 	bl	8001d68 <HAL_InitTick>

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40022000 	.word	0x40022000
 80032d4:	40021000 	.word	0x40021000
 80032d8:	08004348 	.word	0x08004348
 80032dc:	20000010 	.word	0x20000010
 80032e0:	20000014 	.word	0x20000014

080032e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e4:	b490      	push	{r4, r7}
 80032e6:	b08a      	sub	sp, #40	; 0x28
 80032e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032ea:	4b29      	ldr	r3, [pc, #164]	; (8003390 <HAL_RCC_GetSysClockFreq+0xac>)
 80032ec:	1d3c      	adds	r4, r7, #4
 80032ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032f4:	f240 2301 	movw	r3, #513	; 0x201
 80032f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
 80032fe:	2300      	movs	r3, #0
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	2300      	movs	r3, #0
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800330e:	4b21      	ldr	r3, [pc, #132]	; (8003394 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b04      	cmp	r3, #4
 800331c:	d002      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0x40>
 800331e:	2b08      	cmp	r3, #8
 8003320:	d003      	beq.n	800332a <HAL_RCC_GetSysClockFreq+0x46>
 8003322:	e02b      	b.n	800337c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003324:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003326:	623b      	str	r3, [r7, #32]
      break;
 8003328:	e02b      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	0c9b      	lsrs	r3, r3, #18
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	3328      	adds	r3, #40	; 0x28
 8003334:	443b      	add	r3, r7
 8003336:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800333a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d012      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003346:	4b13      	ldr	r3, [pc, #76]	; (8003394 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	0c5b      	lsrs	r3, r3, #17
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	3328      	adds	r3, #40	; 0x28
 8003352:	443b      	add	r3, r7
 8003354:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003358:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	4a0e      	ldr	r2, [pc, #56]	; (8003398 <HAL_RCC_GetSysClockFreq+0xb4>)
 800335e:	fb03 f202 	mul.w	r2, r3, r2
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	fbb2 f3f3 	udiv	r3, r2, r3
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
 800336a:	e004      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	4a0b      	ldr	r2, [pc, #44]	; (800339c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003370:	fb02 f303 	mul.w	r3, r2, r3
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	623b      	str	r3, [r7, #32]
      break;
 800337a:	e002      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_RCC_GetSysClockFreq+0xb4>)
 800337e:	623b      	str	r3, [r7, #32]
      break;
 8003380:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003382:	6a3b      	ldr	r3, [r7, #32]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3728      	adds	r7, #40	; 0x28
 8003388:	46bd      	mov	sp, r7
 800338a:	bc90      	pop	{r4, r7}
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	08004338 	.word	0x08004338
 8003394:	40021000 	.word	0x40021000
 8003398:	007a1200 	.word	0x007a1200
 800339c:	003d0900 	.word	0x003d0900

080033a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a4:	4b02      	ldr	r3, [pc, #8]	; (80033b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	20000010 	.word	0x20000010

080033b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033b8:	f7ff fff2 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	4903      	ldr	r1, [pc, #12]	; (80033d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ca:	5ccb      	ldrb	r3, [r1, r3]
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021000 	.word	0x40021000
 80033d8:	08004358 	.word	0x08004358

080033dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <RCC_Delay+0x34>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a0a      	ldr	r2, [pc, #40]	; (8003414 <RCC_Delay+0x38>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	0a5b      	lsrs	r3, r3, #9
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033f8:	bf00      	nop
  }
  while (Delay --);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1e5a      	subs	r2, r3, #1
 80033fe:	60fa      	str	r2, [r7, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f9      	bne.n	80033f8 <RCC_Delay+0x1c>
}
 8003404:	bf00      	nop
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	20000010 	.word	0x20000010
 8003414:	10624dd3 	.word	0x10624dd3

08003418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e041      	b.n	80034ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fe fbd4 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f000 f93c 	bl	80036d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d001      	beq.n	80034d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e032      	b.n	8003536 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a18      	ldr	r2, [pc, #96]	; (8003540 <HAL_TIM_Base_Start+0x88>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00e      	beq.n	8003500 <HAL_TIM_Base_Start+0x48>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ea:	d009      	beq.n	8003500 <HAL_TIM_Base_Start+0x48>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a14      	ldr	r2, [pc, #80]	; (8003544 <HAL_TIM_Base_Start+0x8c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d004      	beq.n	8003500 <HAL_TIM_Base_Start+0x48>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a13      	ldr	r2, [pc, #76]	; (8003548 <HAL_TIM_Base_Start+0x90>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d111      	bne.n	8003524 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b06      	cmp	r3, #6
 8003510:	d010      	beq.n	8003534 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003522:	e007      	b.n	8003534 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800

0800354c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_TIM_ConfigClockSource+0x18>
 8003560:	2302      	movs	r3, #2
 8003562:	e0b3      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x180>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003582:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800358a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800359c:	d03e      	beq.n	800361c <HAL_TIM_ConfigClockSource+0xd0>
 800359e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a2:	f200 8087 	bhi.w	80036b4 <HAL_TIM_ConfigClockSource+0x168>
 80035a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035aa:	f000 8085 	beq.w	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
 80035ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b2:	d87f      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x168>
 80035b4:	2b70      	cmp	r3, #112	; 0x70
 80035b6:	d01a      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0xa2>
 80035b8:	2b70      	cmp	r3, #112	; 0x70
 80035ba:	d87b      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x168>
 80035bc:	2b60      	cmp	r3, #96	; 0x60
 80035be:	d050      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x116>
 80035c0:	2b60      	cmp	r3, #96	; 0x60
 80035c2:	d877      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x168>
 80035c4:	2b50      	cmp	r3, #80	; 0x50
 80035c6:	d03c      	beq.n	8003642 <HAL_TIM_ConfigClockSource+0xf6>
 80035c8:	2b50      	cmp	r3, #80	; 0x50
 80035ca:	d873      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x168>
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d058      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0x136>
 80035d0:	2b40      	cmp	r3, #64	; 0x40
 80035d2:	d86f      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x168>
 80035d4:	2b30      	cmp	r3, #48	; 0x30
 80035d6:	d064      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x156>
 80035d8:	2b30      	cmp	r3, #48	; 0x30
 80035da:	d86b      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x168>
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d060      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x156>
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	d867      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x168>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d05c      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x156>
 80035e8:	2b10      	cmp	r3, #16
 80035ea:	d05a      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80035ec:	e062      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6899      	ldr	r1, [r3, #8]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f000 f942 	bl	8003886 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003610:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	609a      	str	r2, [r3, #8]
      break;
 800361a:	e04e      	b.n	80036ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6899      	ldr	r1, [r3, #8]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f000 f92b 	bl	8003886 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800363e:	609a      	str	r2, [r3, #8]
      break;
 8003640:	e03b      	b.n	80036ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6859      	ldr	r1, [r3, #4]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	461a      	mov	r2, r3
 8003650:	f000 f8a2 	bl	8003798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2150      	movs	r1, #80	; 0x50
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f8f9 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 8003660:	e02b      	b.n	80036ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	6859      	ldr	r1, [r3, #4]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	461a      	mov	r2, r3
 8003670:	f000 f8c0 	bl	80037f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2160      	movs	r1, #96	; 0x60
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f8e9 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 8003680:	e01b      	b.n	80036ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	6859      	ldr	r1, [r3, #4]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	461a      	mov	r2, r3
 8003690:	f000 f882 	bl	8003798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2140      	movs	r1, #64	; 0x40
 800369a:	4618      	mov	r0, r3
 800369c:	f000 f8d9 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 80036a0:	e00b      	b.n	80036ba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4619      	mov	r1, r3
 80036ac:	4610      	mov	r0, r2
 80036ae:	f000 f8d0 	bl	8003852 <TIM_ITRx_SetConfig>
        break;
 80036b2:	e002      	b.n	80036ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036b4:	bf00      	nop
 80036b6:	e000      	b.n	80036ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a29      	ldr	r2, [pc, #164]	; (800378c <TIM_Base_SetConfig+0xb8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00b      	beq.n	8003704 <TIM_Base_SetConfig+0x30>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f2:	d007      	beq.n	8003704 <TIM_Base_SetConfig+0x30>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a26      	ldr	r2, [pc, #152]	; (8003790 <TIM_Base_SetConfig+0xbc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d003      	beq.n	8003704 <TIM_Base_SetConfig+0x30>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a25      	ldr	r2, [pc, #148]	; (8003794 <TIM_Base_SetConfig+0xc0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d108      	bne.n	8003716 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a1c      	ldr	r2, [pc, #112]	; (800378c <TIM_Base_SetConfig+0xb8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00b      	beq.n	8003736 <TIM_Base_SetConfig+0x62>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003724:	d007      	beq.n	8003736 <TIM_Base_SetConfig+0x62>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a19      	ldr	r2, [pc, #100]	; (8003790 <TIM_Base_SetConfig+0xbc>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d003      	beq.n	8003736 <TIM_Base_SetConfig+0x62>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a18      	ldr	r2, [pc, #96]	; (8003794 <TIM_Base_SetConfig+0xc0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d108      	bne.n	8003748 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a07      	ldr	r2, [pc, #28]	; (800378c <TIM_Base_SetConfig+0xb8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d103      	bne.n	800377c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	615a      	str	r2, [r3, #20]
}
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	40012c00 	.word	0x40012c00
 8003790:	40000400 	.word	0x40000400
 8003794:	40000800 	.word	0x40000800

08003798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	f023 0201 	bic.w	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f023 030a 	bic.w	r3, r3, #10
 80037d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	621a      	str	r2, [r3, #32]
}
 80037ea:	bf00      	nop
 80037ec:	371c      	adds	r7, #28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr

080037f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f023 0210 	bic.w	r2, r3, #16
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800381e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	031b      	lsls	r3, r3, #12
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003830:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	621a      	str	r2, [r3, #32]
}
 8003848:	bf00      	nop
 800384a:	371c      	adds	r7, #28
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr

08003852 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003868:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	f043 0307 	orr.w	r3, r3, #7
 8003874:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	609a      	str	r2, [r3, #8]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr

08003886 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003886:	b480      	push	{r7}
 8003888:	b087      	sub	sp, #28
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
 8003892:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	021a      	lsls	r2, r3, #8
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	431a      	orrs	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	609a      	str	r2, [r3, #8]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038d8:	2302      	movs	r3, #2
 80038da:	e046      	b.n	800396a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a16      	ldr	r2, [pc, #88]	; (8003974 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00e      	beq.n	800393e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003928:	d009      	beq.n	800393e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a12      	ldr	r2, [pc, #72]	; (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d004      	beq.n	800393e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a10      	ldr	r2, [pc, #64]	; (800397c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d10c      	bne.n	8003958 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003944:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	4313      	orrs	r3, r2
 800394e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr
 8003974:	40012c00 	.word	0x40012c00
 8003978:	40000400 	.word	0x40000400
 800397c:	40000800 	.word	0x40000800

08003980 <__errno>:
 8003980:	4b01      	ldr	r3, [pc, #4]	; (8003988 <__errno+0x8>)
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	2000001c 	.word	0x2000001c

0800398c <__libc_init_array>:
 800398c:	b570      	push	{r4, r5, r6, lr}
 800398e:	2600      	movs	r6, #0
 8003990:	4d0c      	ldr	r5, [pc, #48]	; (80039c4 <__libc_init_array+0x38>)
 8003992:	4c0d      	ldr	r4, [pc, #52]	; (80039c8 <__libc_init_array+0x3c>)
 8003994:	1b64      	subs	r4, r4, r5
 8003996:	10a4      	asrs	r4, r4, #2
 8003998:	42a6      	cmp	r6, r4
 800399a:	d109      	bne.n	80039b0 <__libc_init_array+0x24>
 800399c:	f000 fc9c 	bl	80042d8 <_init>
 80039a0:	2600      	movs	r6, #0
 80039a2:	4d0a      	ldr	r5, [pc, #40]	; (80039cc <__libc_init_array+0x40>)
 80039a4:	4c0a      	ldr	r4, [pc, #40]	; (80039d0 <__libc_init_array+0x44>)
 80039a6:	1b64      	subs	r4, r4, r5
 80039a8:	10a4      	asrs	r4, r4, #2
 80039aa:	42a6      	cmp	r6, r4
 80039ac:	d105      	bne.n	80039ba <__libc_init_array+0x2e>
 80039ae:	bd70      	pop	{r4, r5, r6, pc}
 80039b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b4:	4798      	blx	r3
 80039b6:	3601      	adds	r6, #1
 80039b8:	e7ee      	b.n	8003998 <__libc_init_array+0xc>
 80039ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80039be:	4798      	blx	r3
 80039c0:	3601      	adds	r6, #1
 80039c2:	e7f2      	b.n	80039aa <__libc_init_array+0x1e>
 80039c4:	08004394 	.word	0x08004394
 80039c8:	08004394 	.word	0x08004394
 80039cc:	08004394 	.word	0x08004394
 80039d0:	08004398 	.word	0x08004398

080039d4 <memset>:
 80039d4:	4603      	mov	r3, r0
 80039d6:	4402      	add	r2, r0
 80039d8:	4293      	cmp	r3, r2
 80039da:	d100      	bne.n	80039de <memset+0xa>
 80039dc:	4770      	bx	lr
 80039de:	f803 1b01 	strb.w	r1, [r3], #1
 80039e2:	e7f9      	b.n	80039d8 <memset+0x4>

080039e4 <siprintf>:
 80039e4:	b40e      	push	{r1, r2, r3}
 80039e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039ea:	b500      	push	{lr}
 80039ec:	b09c      	sub	sp, #112	; 0x70
 80039ee:	ab1d      	add	r3, sp, #116	; 0x74
 80039f0:	9002      	str	r0, [sp, #8]
 80039f2:	9006      	str	r0, [sp, #24]
 80039f4:	9107      	str	r1, [sp, #28]
 80039f6:	9104      	str	r1, [sp, #16]
 80039f8:	4808      	ldr	r0, [pc, #32]	; (8003a1c <siprintf+0x38>)
 80039fa:	4909      	ldr	r1, [pc, #36]	; (8003a20 <siprintf+0x3c>)
 80039fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a00:	9105      	str	r1, [sp, #20]
 8003a02:	6800      	ldr	r0, [r0, #0]
 8003a04:	a902      	add	r1, sp, #8
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	f000 f868 	bl	8003adc <_svfiprintf_r>
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	9b02      	ldr	r3, [sp, #8]
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	b01c      	add	sp, #112	; 0x70
 8003a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a18:	b003      	add	sp, #12
 8003a1a:	4770      	bx	lr
 8003a1c:	2000001c 	.word	0x2000001c
 8003a20:	ffff0208 	.word	0xffff0208

08003a24 <__ssputs_r>:
 8003a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a28:	688e      	ldr	r6, [r1, #8]
 8003a2a:	4682      	mov	sl, r0
 8003a2c:	429e      	cmp	r6, r3
 8003a2e:	460c      	mov	r4, r1
 8003a30:	4690      	mov	r8, r2
 8003a32:	461f      	mov	r7, r3
 8003a34:	d838      	bhi.n	8003aa8 <__ssputs_r+0x84>
 8003a36:	898a      	ldrh	r2, [r1, #12]
 8003a38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a3c:	d032      	beq.n	8003aa4 <__ssputs_r+0x80>
 8003a3e:	6825      	ldr	r5, [r4, #0]
 8003a40:	6909      	ldr	r1, [r1, #16]
 8003a42:	3301      	adds	r3, #1
 8003a44:	eba5 0901 	sub.w	r9, r5, r1
 8003a48:	6965      	ldr	r5, [r4, #20]
 8003a4a:	444b      	add	r3, r9
 8003a4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a54:	106d      	asrs	r5, r5, #1
 8003a56:	429d      	cmp	r5, r3
 8003a58:	bf38      	it	cc
 8003a5a:	461d      	movcc	r5, r3
 8003a5c:	0553      	lsls	r3, r2, #21
 8003a5e:	d531      	bpl.n	8003ac4 <__ssputs_r+0xa0>
 8003a60:	4629      	mov	r1, r5
 8003a62:	f000 fb6f 	bl	8004144 <_malloc_r>
 8003a66:	4606      	mov	r6, r0
 8003a68:	b950      	cbnz	r0, 8003a80 <__ssputs_r+0x5c>
 8003a6a:	230c      	movs	r3, #12
 8003a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a70:	f8ca 3000 	str.w	r3, [sl]
 8003a74:	89a3      	ldrh	r3, [r4, #12]
 8003a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a7a:	81a3      	strh	r3, [r4, #12]
 8003a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a80:	464a      	mov	r2, r9
 8003a82:	6921      	ldr	r1, [r4, #16]
 8003a84:	f000 face 	bl	8004024 <memcpy>
 8003a88:	89a3      	ldrh	r3, [r4, #12]
 8003a8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a92:	81a3      	strh	r3, [r4, #12]
 8003a94:	6126      	str	r6, [r4, #16]
 8003a96:	444e      	add	r6, r9
 8003a98:	6026      	str	r6, [r4, #0]
 8003a9a:	463e      	mov	r6, r7
 8003a9c:	6165      	str	r5, [r4, #20]
 8003a9e:	eba5 0509 	sub.w	r5, r5, r9
 8003aa2:	60a5      	str	r5, [r4, #8]
 8003aa4:	42be      	cmp	r6, r7
 8003aa6:	d900      	bls.n	8003aaa <__ssputs_r+0x86>
 8003aa8:	463e      	mov	r6, r7
 8003aaa:	4632      	mov	r2, r6
 8003aac:	4641      	mov	r1, r8
 8003aae:	6820      	ldr	r0, [r4, #0]
 8003ab0:	f000 fac6 	bl	8004040 <memmove>
 8003ab4:	68a3      	ldr	r3, [r4, #8]
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	1b9b      	subs	r3, r3, r6
 8003aba:	60a3      	str	r3, [r4, #8]
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	4433      	add	r3, r6
 8003ac0:	6023      	str	r3, [r4, #0]
 8003ac2:	e7db      	b.n	8003a7c <__ssputs_r+0x58>
 8003ac4:	462a      	mov	r2, r5
 8003ac6:	f000 fbb1 	bl	800422c <_realloc_r>
 8003aca:	4606      	mov	r6, r0
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d1e1      	bne.n	8003a94 <__ssputs_r+0x70>
 8003ad0:	4650      	mov	r0, sl
 8003ad2:	6921      	ldr	r1, [r4, #16]
 8003ad4:	f000 face 	bl	8004074 <_free_r>
 8003ad8:	e7c7      	b.n	8003a6a <__ssputs_r+0x46>
	...

08003adc <_svfiprintf_r>:
 8003adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae0:	4698      	mov	r8, r3
 8003ae2:	898b      	ldrh	r3, [r1, #12]
 8003ae4:	4607      	mov	r7, r0
 8003ae6:	061b      	lsls	r3, r3, #24
 8003ae8:	460d      	mov	r5, r1
 8003aea:	4614      	mov	r4, r2
 8003aec:	b09d      	sub	sp, #116	; 0x74
 8003aee:	d50e      	bpl.n	8003b0e <_svfiprintf_r+0x32>
 8003af0:	690b      	ldr	r3, [r1, #16]
 8003af2:	b963      	cbnz	r3, 8003b0e <_svfiprintf_r+0x32>
 8003af4:	2140      	movs	r1, #64	; 0x40
 8003af6:	f000 fb25 	bl	8004144 <_malloc_r>
 8003afa:	6028      	str	r0, [r5, #0]
 8003afc:	6128      	str	r0, [r5, #16]
 8003afe:	b920      	cbnz	r0, 8003b0a <_svfiprintf_r+0x2e>
 8003b00:	230c      	movs	r3, #12
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	f04f 30ff 	mov.w	r0, #4294967295
 8003b08:	e0d1      	b.n	8003cae <_svfiprintf_r+0x1d2>
 8003b0a:	2340      	movs	r3, #64	; 0x40
 8003b0c:	616b      	str	r3, [r5, #20]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	9309      	str	r3, [sp, #36]	; 0x24
 8003b12:	2320      	movs	r3, #32
 8003b14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b18:	2330      	movs	r3, #48	; 0x30
 8003b1a:	f04f 0901 	mov.w	r9, #1
 8003b1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003cc8 <_svfiprintf_r+0x1ec>
 8003b26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b2a:	4623      	mov	r3, r4
 8003b2c:	469a      	mov	sl, r3
 8003b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b32:	b10a      	cbz	r2, 8003b38 <_svfiprintf_r+0x5c>
 8003b34:	2a25      	cmp	r2, #37	; 0x25
 8003b36:	d1f9      	bne.n	8003b2c <_svfiprintf_r+0x50>
 8003b38:	ebba 0b04 	subs.w	fp, sl, r4
 8003b3c:	d00b      	beq.n	8003b56 <_svfiprintf_r+0x7a>
 8003b3e:	465b      	mov	r3, fp
 8003b40:	4622      	mov	r2, r4
 8003b42:	4629      	mov	r1, r5
 8003b44:	4638      	mov	r0, r7
 8003b46:	f7ff ff6d 	bl	8003a24 <__ssputs_r>
 8003b4a:	3001      	adds	r0, #1
 8003b4c:	f000 80aa 	beq.w	8003ca4 <_svfiprintf_r+0x1c8>
 8003b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b52:	445a      	add	r2, fp
 8003b54:	9209      	str	r2, [sp, #36]	; 0x24
 8003b56:	f89a 3000 	ldrb.w	r3, [sl]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 80a2 	beq.w	8003ca4 <_svfiprintf_r+0x1c8>
 8003b60:	2300      	movs	r3, #0
 8003b62:	f04f 32ff 	mov.w	r2, #4294967295
 8003b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b6a:	f10a 0a01 	add.w	sl, sl, #1
 8003b6e:	9304      	str	r3, [sp, #16]
 8003b70:	9307      	str	r3, [sp, #28]
 8003b72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b76:	931a      	str	r3, [sp, #104]	; 0x68
 8003b78:	4654      	mov	r4, sl
 8003b7a:	2205      	movs	r2, #5
 8003b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b80:	4851      	ldr	r0, [pc, #324]	; (8003cc8 <_svfiprintf_r+0x1ec>)
 8003b82:	f000 fa41 	bl	8004008 <memchr>
 8003b86:	9a04      	ldr	r2, [sp, #16]
 8003b88:	b9d8      	cbnz	r0, 8003bc2 <_svfiprintf_r+0xe6>
 8003b8a:	06d0      	lsls	r0, r2, #27
 8003b8c:	bf44      	itt	mi
 8003b8e:	2320      	movmi	r3, #32
 8003b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b94:	0711      	lsls	r1, r2, #28
 8003b96:	bf44      	itt	mi
 8003b98:	232b      	movmi	r3, #43	; 0x2b
 8003b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8003ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ba4:	d015      	beq.n	8003bd2 <_svfiprintf_r+0xf6>
 8003ba6:	4654      	mov	r4, sl
 8003ba8:	2000      	movs	r0, #0
 8003baa:	f04f 0c0a 	mov.w	ip, #10
 8003bae:	9a07      	ldr	r2, [sp, #28]
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bb6:	3b30      	subs	r3, #48	; 0x30
 8003bb8:	2b09      	cmp	r3, #9
 8003bba:	d94e      	bls.n	8003c5a <_svfiprintf_r+0x17e>
 8003bbc:	b1b0      	cbz	r0, 8003bec <_svfiprintf_r+0x110>
 8003bbe:	9207      	str	r2, [sp, #28]
 8003bc0:	e014      	b.n	8003bec <_svfiprintf_r+0x110>
 8003bc2:	eba0 0308 	sub.w	r3, r0, r8
 8003bc6:	fa09 f303 	lsl.w	r3, r9, r3
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	46a2      	mov	sl, r4
 8003bce:	9304      	str	r3, [sp, #16]
 8003bd0:	e7d2      	b.n	8003b78 <_svfiprintf_r+0x9c>
 8003bd2:	9b03      	ldr	r3, [sp, #12]
 8003bd4:	1d19      	adds	r1, r3, #4
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	9103      	str	r1, [sp, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	bfbb      	ittet	lt
 8003bde:	425b      	neglt	r3, r3
 8003be0:	f042 0202 	orrlt.w	r2, r2, #2
 8003be4:	9307      	strge	r3, [sp, #28]
 8003be6:	9307      	strlt	r3, [sp, #28]
 8003be8:	bfb8      	it	lt
 8003bea:	9204      	strlt	r2, [sp, #16]
 8003bec:	7823      	ldrb	r3, [r4, #0]
 8003bee:	2b2e      	cmp	r3, #46	; 0x2e
 8003bf0:	d10c      	bne.n	8003c0c <_svfiprintf_r+0x130>
 8003bf2:	7863      	ldrb	r3, [r4, #1]
 8003bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8003bf6:	d135      	bne.n	8003c64 <_svfiprintf_r+0x188>
 8003bf8:	9b03      	ldr	r3, [sp, #12]
 8003bfa:	3402      	adds	r4, #2
 8003bfc:	1d1a      	adds	r2, r3, #4
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	9203      	str	r2, [sp, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	bfb8      	it	lt
 8003c06:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c0a:	9305      	str	r3, [sp, #20]
 8003c0c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003ccc <_svfiprintf_r+0x1f0>
 8003c10:	2203      	movs	r2, #3
 8003c12:	4650      	mov	r0, sl
 8003c14:	7821      	ldrb	r1, [r4, #0]
 8003c16:	f000 f9f7 	bl	8004008 <memchr>
 8003c1a:	b140      	cbz	r0, 8003c2e <_svfiprintf_r+0x152>
 8003c1c:	2340      	movs	r3, #64	; 0x40
 8003c1e:	eba0 000a 	sub.w	r0, r0, sl
 8003c22:	fa03 f000 	lsl.w	r0, r3, r0
 8003c26:	9b04      	ldr	r3, [sp, #16]
 8003c28:	3401      	adds	r4, #1
 8003c2a:	4303      	orrs	r3, r0
 8003c2c:	9304      	str	r3, [sp, #16]
 8003c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c32:	2206      	movs	r2, #6
 8003c34:	4826      	ldr	r0, [pc, #152]	; (8003cd0 <_svfiprintf_r+0x1f4>)
 8003c36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c3a:	f000 f9e5 	bl	8004008 <memchr>
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	d038      	beq.n	8003cb4 <_svfiprintf_r+0x1d8>
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <_svfiprintf_r+0x1f8>)
 8003c44:	bb1b      	cbnz	r3, 8003c8e <_svfiprintf_r+0x1b2>
 8003c46:	9b03      	ldr	r3, [sp, #12]
 8003c48:	3307      	adds	r3, #7
 8003c4a:	f023 0307 	bic.w	r3, r3, #7
 8003c4e:	3308      	adds	r3, #8
 8003c50:	9303      	str	r3, [sp, #12]
 8003c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c54:	4433      	add	r3, r6
 8003c56:	9309      	str	r3, [sp, #36]	; 0x24
 8003c58:	e767      	b.n	8003b2a <_svfiprintf_r+0x4e>
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c62:	e7a5      	b.n	8003bb0 <_svfiprintf_r+0xd4>
 8003c64:	2300      	movs	r3, #0
 8003c66:	f04f 0c0a 	mov.w	ip, #10
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	3401      	adds	r4, #1
 8003c6e:	9305      	str	r3, [sp, #20]
 8003c70:	4620      	mov	r0, r4
 8003c72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c76:	3a30      	subs	r2, #48	; 0x30
 8003c78:	2a09      	cmp	r2, #9
 8003c7a:	d903      	bls.n	8003c84 <_svfiprintf_r+0x1a8>
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0c5      	beq.n	8003c0c <_svfiprintf_r+0x130>
 8003c80:	9105      	str	r1, [sp, #20]
 8003c82:	e7c3      	b.n	8003c0c <_svfiprintf_r+0x130>
 8003c84:	4604      	mov	r4, r0
 8003c86:	2301      	movs	r3, #1
 8003c88:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c8c:	e7f0      	b.n	8003c70 <_svfiprintf_r+0x194>
 8003c8e:	ab03      	add	r3, sp, #12
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	462a      	mov	r2, r5
 8003c94:	4638      	mov	r0, r7
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <_svfiprintf_r+0x1fc>)
 8003c98:	a904      	add	r1, sp, #16
 8003c9a:	f3af 8000 	nop.w
 8003c9e:	1c42      	adds	r2, r0, #1
 8003ca0:	4606      	mov	r6, r0
 8003ca2:	d1d6      	bne.n	8003c52 <_svfiprintf_r+0x176>
 8003ca4:	89ab      	ldrh	r3, [r5, #12]
 8003ca6:	065b      	lsls	r3, r3, #25
 8003ca8:	f53f af2c 	bmi.w	8003b04 <_svfiprintf_r+0x28>
 8003cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cae:	b01d      	add	sp, #116	; 0x74
 8003cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cb4:	ab03      	add	r3, sp, #12
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	462a      	mov	r2, r5
 8003cba:	4638      	mov	r0, r7
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <_svfiprintf_r+0x1fc>)
 8003cbe:	a904      	add	r1, sp, #16
 8003cc0:	f000 f87c 	bl	8003dbc <_printf_i>
 8003cc4:	e7eb      	b.n	8003c9e <_svfiprintf_r+0x1c2>
 8003cc6:	bf00      	nop
 8003cc8:	08004360 	.word	0x08004360
 8003ccc:	08004366 	.word	0x08004366
 8003cd0:	0800436a 	.word	0x0800436a
 8003cd4:	00000000 	.word	0x00000000
 8003cd8:	08003a25 	.word	0x08003a25

08003cdc <_printf_common>:
 8003cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce0:	4616      	mov	r6, r2
 8003ce2:	4699      	mov	r9, r3
 8003ce4:	688a      	ldr	r2, [r1, #8]
 8003ce6:	690b      	ldr	r3, [r1, #16]
 8003ce8:	4607      	mov	r7, r0
 8003cea:	4293      	cmp	r3, r2
 8003cec:	bfb8      	it	lt
 8003cee:	4613      	movlt	r3, r2
 8003cf0:	6033      	str	r3, [r6, #0]
 8003cf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cfc:	b10a      	cbz	r2, 8003d02 <_printf_common+0x26>
 8003cfe:	3301      	adds	r3, #1
 8003d00:	6033      	str	r3, [r6, #0]
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	0699      	lsls	r1, r3, #26
 8003d06:	bf42      	ittt	mi
 8003d08:	6833      	ldrmi	r3, [r6, #0]
 8003d0a:	3302      	addmi	r3, #2
 8003d0c:	6033      	strmi	r3, [r6, #0]
 8003d0e:	6825      	ldr	r5, [r4, #0]
 8003d10:	f015 0506 	ands.w	r5, r5, #6
 8003d14:	d106      	bne.n	8003d24 <_printf_common+0x48>
 8003d16:	f104 0a19 	add.w	sl, r4, #25
 8003d1a:	68e3      	ldr	r3, [r4, #12]
 8003d1c:	6832      	ldr	r2, [r6, #0]
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	42ab      	cmp	r3, r5
 8003d22:	dc28      	bgt.n	8003d76 <_printf_common+0x9a>
 8003d24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d28:	1e13      	subs	r3, r2, #0
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	bf18      	it	ne
 8003d2e:	2301      	movne	r3, #1
 8003d30:	0692      	lsls	r2, r2, #26
 8003d32:	d42d      	bmi.n	8003d90 <_printf_common+0xb4>
 8003d34:	4649      	mov	r1, r9
 8003d36:	4638      	mov	r0, r7
 8003d38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d3c:	47c0      	blx	r8
 8003d3e:	3001      	adds	r0, #1
 8003d40:	d020      	beq.n	8003d84 <_printf_common+0xa8>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	68e5      	ldr	r5, [r4, #12]
 8003d46:	f003 0306 	and.w	r3, r3, #6
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	bf18      	it	ne
 8003d4e:	2500      	movne	r5, #0
 8003d50:	6832      	ldr	r2, [r6, #0]
 8003d52:	f04f 0600 	mov.w	r6, #0
 8003d56:	68a3      	ldr	r3, [r4, #8]
 8003d58:	bf08      	it	eq
 8003d5a:	1aad      	subeq	r5, r5, r2
 8003d5c:	6922      	ldr	r2, [r4, #16]
 8003d5e:	bf08      	it	eq
 8003d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d64:	4293      	cmp	r3, r2
 8003d66:	bfc4      	itt	gt
 8003d68:	1a9b      	subgt	r3, r3, r2
 8003d6a:	18ed      	addgt	r5, r5, r3
 8003d6c:	341a      	adds	r4, #26
 8003d6e:	42b5      	cmp	r5, r6
 8003d70:	d11a      	bne.n	8003da8 <_printf_common+0xcc>
 8003d72:	2000      	movs	r0, #0
 8003d74:	e008      	b.n	8003d88 <_printf_common+0xac>
 8003d76:	2301      	movs	r3, #1
 8003d78:	4652      	mov	r2, sl
 8003d7a:	4649      	mov	r1, r9
 8003d7c:	4638      	mov	r0, r7
 8003d7e:	47c0      	blx	r8
 8003d80:	3001      	adds	r0, #1
 8003d82:	d103      	bne.n	8003d8c <_printf_common+0xb0>
 8003d84:	f04f 30ff 	mov.w	r0, #4294967295
 8003d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d8c:	3501      	adds	r5, #1
 8003d8e:	e7c4      	b.n	8003d1a <_printf_common+0x3e>
 8003d90:	2030      	movs	r0, #48	; 0x30
 8003d92:	18e1      	adds	r1, r4, r3
 8003d94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d9e:	4422      	add	r2, r4
 8003da0:	3302      	adds	r3, #2
 8003da2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003da6:	e7c5      	b.n	8003d34 <_printf_common+0x58>
 8003da8:	2301      	movs	r3, #1
 8003daa:	4622      	mov	r2, r4
 8003dac:	4649      	mov	r1, r9
 8003dae:	4638      	mov	r0, r7
 8003db0:	47c0      	blx	r8
 8003db2:	3001      	adds	r0, #1
 8003db4:	d0e6      	beq.n	8003d84 <_printf_common+0xa8>
 8003db6:	3601      	adds	r6, #1
 8003db8:	e7d9      	b.n	8003d6e <_printf_common+0x92>
	...

08003dbc <_printf_i>:
 8003dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc0:	7e0f      	ldrb	r7, [r1, #24]
 8003dc2:	4691      	mov	r9, r2
 8003dc4:	2f78      	cmp	r7, #120	; 0x78
 8003dc6:	4680      	mov	r8, r0
 8003dc8:	460c      	mov	r4, r1
 8003dca:	469a      	mov	sl, r3
 8003dcc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003dce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003dd2:	d807      	bhi.n	8003de4 <_printf_i+0x28>
 8003dd4:	2f62      	cmp	r7, #98	; 0x62
 8003dd6:	d80a      	bhi.n	8003dee <_printf_i+0x32>
 8003dd8:	2f00      	cmp	r7, #0
 8003dda:	f000 80d9 	beq.w	8003f90 <_printf_i+0x1d4>
 8003dde:	2f58      	cmp	r7, #88	; 0x58
 8003de0:	f000 80a4 	beq.w	8003f2c <_printf_i+0x170>
 8003de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003de8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003dec:	e03a      	b.n	8003e64 <_printf_i+0xa8>
 8003dee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003df2:	2b15      	cmp	r3, #21
 8003df4:	d8f6      	bhi.n	8003de4 <_printf_i+0x28>
 8003df6:	a101      	add	r1, pc, #4	; (adr r1, 8003dfc <_printf_i+0x40>)
 8003df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dfc:	08003e55 	.word	0x08003e55
 8003e00:	08003e69 	.word	0x08003e69
 8003e04:	08003de5 	.word	0x08003de5
 8003e08:	08003de5 	.word	0x08003de5
 8003e0c:	08003de5 	.word	0x08003de5
 8003e10:	08003de5 	.word	0x08003de5
 8003e14:	08003e69 	.word	0x08003e69
 8003e18:	08003de5 	.word	0x08003de5
 8003e1c:	08003de5 	.word	0x08003de5
 8003e20:	08003de5 	.word	0x08003de5
 8003e24:	08003de5 	.word	0x08003de5
 8003e28:	08003f77 	.word	0x08003f77
 8003e2c:	08003e99 	.word	0x08003e99
 8003e30:	08003f59 	.word	0x08003f59
 8003e34:	08003de5 	.word	0x08003de5
 8003e38:	08003de5 	.word	0x08003de5
 8003e3c:	08003f99 	.word	0x08003f99
 8003e40:	08003de5 	.word	0x08003de5
 8003e44:	08003e99 	.word	0x08003e99
 8003e48:	08003de5 	.word	0x08003de5
 8003e4c:	08003de5 	.word	0x08003de5
 8003e50:	08003f61 	.word	0x08003f61
 8003e54:	682b      	ldr	r3, [r5, #0]
 8003e56:	1d1a      	adds	r2, r3, #4
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	602a      	str	r2, [r5, #0]
 8003e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0a4      	b.n	8003fb2 <_printf_i+0x1f6>
 8003e68:	6820      	ldr	r0, [r4, #0]
 8003e6a:	6829      	ldr	r1, [r5, #0]
 8003e6c:	0606      	lsls	r6, r0, #24
 8003e6e:	f101 0304 	add.w	r3, r1, #4
 8003e72:	d50a      	bpl.n	8003e8a <_printf_i+0xce>
 8003e74:	680e      	ldr	r6, [r1, #0]
 8003e76:	602b      	str	r3, [r5, #0]
 8003e78:	2e00      	cmp	r6, #0
 8003e7a:	da03      	bge.n	8003e84 <_printf_i+0xc8>
 8003e7c:	232d      	movs	r3, #45	; 0x2d
 8003e7e:	4276      	negs	r6, r6
 8003e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e84:	230a      	movs	r3, #10
 8003e86:	485e      	ldr	r0, [pc, #376]	; (8004000 <_printf_i+0x244>)
 8003e88:	e019      	b.n	8003ebe <_printf_i+0x102>
 8003e8a:	680e      	ldr	r6, [r1, #0]
 8003e8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e90:	602b      	str	r3, [r5, #0]
 8003e92:	bf18      	it	ne
 8003e94:	b236      	sxthne	r6, r6
 8003e96:	e7ef      	b.n	8003e78 <_printf_i+0xbc>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	6820      	ldr	r0, [r4, #0]
 8003e9c:	1d19      	adds	r1, r3, #4
 8003e9e:	6029      	str	r1, [r5, #0]
 8003ea0:	0601      	lsls	r1, r0, #24
 8003ea2:	d501      	bpl.n	8003ea8 <_printf_i+0xec>
 8003ea4:	681e      	ldr	r6, [r3, #0]
 8003ea6:	e002      	b.n	8003eae <_printf_i+0xf2>
 8003ea8:	0646      	lsls	r6, r0, #25
 8003eaa:	d5fb      	bpl.n	8003ea4 <_printf_i+0xe8>
 8003eac:	881e      	ldrh	r6, [r3, #0]
 8003eae:	2f6f      	cmp	r7, #111	; 0x6f
 8003eb0:	bf0c      	ite	eq
 8003eb2:	2308      	moveq	r3, #8
 8003eb4:	230a      	movne	r3, #10
 8003eb6:	4852      	ldr	r0, [pc, #328]	; (8004000 <_printf_i+0x244>)
 8003eb8:	2100      	movs	r1, #0
 8003eba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ebe:	6865      	ldr	r5, [r4, #4]
 8003ec0:	2d00      	cmp	r5, #0
 8003ec2:	bfa8      	it	ge
 8003ec4:	6821      	ldrge	r1, [r4, #0]
 8003ec6:	60a5      	str	r5, [r4, #8]
 8003ec8:	bfa4      	itt	ge
 8003eca:	f021 0104 	bicge.w	r1, r1, #4
 8003ece:	6021      	strge	r1, [r4, #0]
 8003ed0:	b90e      	cbnz	r6, 8003ed6 <_printf_i+0x11a>
 8003ed2:	2d00      	cmp	r5, #0
 8003ed4:	d04d      	beq.n	8003f72 <_printf_i+0x1b6>
 8003ed6:	4615      	mov	r5, r2
 8003ed8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003edc:	fb03 6711 	mls	r7, r3, r1, r6
 8003ee0:	5dc7      	ldrb	r7, [r0, r7]
 8003ee2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ee6:	4637      	mov	r7, r6
 8003ee8:	42bb      	cmp	r3, r7
 8003eea:	460e      	mov	r6, r1
 8003eec:	d9f4      	bls.n	8003ed8 <_printf_i+0x11c>
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d10b      	bne.n	8003f0a <_printf_i+0x14e>
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	07de      	lsls	r6, r3, #31
 8003ef6:	d508      	bpl.n	8003f0a <_printf_i+0x14e>
 8003ef8:	6923      	ldr	r3, [r4, #16]
 8003efa:	6861      	ldr	r1, [r4, #4]
 8003efc:	4299      	cmp	r1, r3
 8003efe:	bfde      	ittt	le
 8003f00:	2330      	movle	r3, #48	; 0x30
 8003f02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f0a:	1b52      	subs	r2, r2, r5
 8003f0c:	6122      	str	r2, [r4, #16]
 8003f0e:	464b      	mov	r3, r9
 8003f10:	4621      	mov	r1, r4
 8003f12:	4640      	mov	r0, r8
 8003f14:	f8cd a000 	str.w	sl, [sp]
 8003f18:	aa03      	add	r2, sp, #12
 8003f1a:	f7ff fedf 	bl	8003cdc <_printf_common>
 8003f1e:	3001      	adds	r0, #1
 8003f20:	d14c      	bne.n	8003fbc <_printf_i+0x200>
 8003f22:	f04f 30ff 	mov.w	r0, #4294967295
 8003f26:	b004      	add	sp, #16
 8003f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f2c:	4834      	ldr	r0, [pc, #208]	; (8004000 <_printf_i+0x244>)
 8003f2e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f32:	6829      	ldr	r1, [r5, #0]
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f3a:	6029      	str	r1, [r5, #0]
 8003f3c:	061d      	lsls	r5, r3, #24
 8003f3e:	d514      	bpl.n	8003f6a <_printf_i+0x1ae>
 8003f40:	07df      	lsls	r7, r3, #31
 8003f42:	bf44      	itt	mi
 8003f44:	f043 0320 	orrmi.w	r3, r3, #32
 8003f48:	6023      	strmi	r3, [r4, #0]
 8003f4a:	b91e      	cbnz	r6, 8003f54 <_printf_i+0x198>
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	f023 0320 	bic.w	r3, r3, #32
 8003f52:	6023      	str	r3, [r4, #0]
 8003f54:	2310      	movs	r3, #16
 8003f56:	e7af      	b.n	8003eb8 <_printf_i+0xfc>
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	f043 0320 	orr.w	r3, r3, #32
 8003f5e:	6023      	str	r3, [r4, #0]
 8003f60:	2378      	movs	r3, #120	; 0x78
 8003f62:	4828      	ldr	r0, [pc, #160]	; (8004004 <_printf_i+0x248>)
 8003f64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f68:	e7e3      	b.n	8003f32 <_printf_i+0x176>
 8003f6a:	0659      	lsls	r1, r3, #25
 8003f6c:	bf48      	it	mi
 8003f6e:	b2b6      	uxthmi	r6, r6
 8003f70:	e7e6      	b.n	8003f40 <_printf_i+0x184>
 8003f72:	4615      	mov	r5, r2
 8003f74:	e7bb      	b.n	8003eee <_printf_i+0x132>
 8003f76:	682b      	ldr	r3, [r5, #0]
 8003f78:	6826      	ldr	r6, [r4, #0]
 8003f7a:	1d18      	adds	r0, r3, #4
 8003f7c:	6961      	ldr	r1, [r4, #20]
 8003f7e:	6028      	str	r0, [r5, #0]
 8003f80:	0635      	lsls	r5, r6, #24
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	d501      	bpl.n	8003f8a <_printf_i+0x1ce>
 8003f86:	6019      	str	r1, [r3, #0]
 8003f88:	e002      	b.n	8003f90 <_printf_i+0x1d4>
 8003f8a:	0670      	lsls	r0, r6, #25
 8003f8c:	d5fb      	bpl.n	8003f86 <_printf_i+0x1ca>
 8003f8e:	8019      	strh	r1, [r3, #0]
 8003f90:	2300      	movs	r3, #0
 8003f92:	4615      	mov	r5, r2
 8003f94:	6123      	str	r3, [r4, #16]
 8003f96:	e7ba      	b.n	8003f0e <_printf_i+0x152>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	1d1a      	adds	r2, r3, #4
 8003f9e:	602a      	str	r2, [r5, #0]
 8003fa0:	681d      	ldr	r5, [r3, #0]
 8003fa2:	6862      	ldr	r2, [r4, #4]
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	f000 f82f 	bl	8004008 <memchr>
 8003faa:	b108      	cbz	r0, 8003fb0 <_printf_i+0x1f4>
 8003fac:	1b40      	subs	r0, r0, r5
 8003fae:	6060      	str	r0, [r4, #4]
 8003fb0:	6863      	ldr	r3, [r4, #4]
 8003fb2:	6123      	str	r3, [r4, #16]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fba:	e7a8      	b.n	8003f0e <_printf_i+0x152>
 8003fbc:	462a      	mov	r2, r5
 8003fbe:	4649      	mov	r1, r9
 8003fc0:	4640      	mov	r0, r8
 8003fc2:	6923      	ldr	r3, [r4, #16]
 8003fc4:	47d0      	blx	sl
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d0ab      	beq.n	8003f22 <_printf_i+0x166>
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	079b      	lsls	r3, r3, #30
 8003fce:	d413      	bmi.n	8003ff8 <_printf_i+0x23c>
 8003fd0:	68e0      	ldr	r0, [r4, #12]
 8003fd2:	9b03      	ldr	r3, [sp, #12]
 8003fd4:	4298      	cmp	r0, r3
 8003fd6:	bfb8      	it	lt
 8003fd8:	4618      	movlt	r0, r3
 8003fda:	e7a4      	b.n	8003f26 <_printf_i+0x16a>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	4632      	mov	r2, r6
 8003fe0:	4649      	mov	r1, r9
 8003fe2:	4640      	mov	r0, r8
 8003fe4:	47d0      	blx	sl
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	d09b      	beq.n	8003f22 <_printf_i+0x166>
 8003fea:	3501      	adds	r5, #1
 8003fec:	68e3      	ldr	r3, [r4, #12]
 8003fee:	9903      	ldr	r1, [sp, #12]
 8003ff0:	1a5b      	subs	r3, r3, r1
 8003ff2:	42ab      	cmp	r3, r5
 8003ff4:	dcf2      	bgt.n	8003fdc <_printf_i+0x220>
 8003ff6:	e7eb      	b.n	8003fd0 <_printf_i+0x214>
 8003ff8:	2500      	movs	r5, #0
 8003ffa:	f104 0619 	add.w	r6, r4, #25
 8003ffe:	e7f5      	b.n	8003fec <_printf_i+0x230>
 8004000:	08004371 	.word	0x08004371
 8004004:	08004382 	.word	0x08004382

08004008 <memchr>:
 8004008:	4603      	mov	r3, r0
 800400a:	b510      	push	{r4, lr}
 800400c:	b2c9      	uxtb	r1, r1
 800400e:	4402      	add	r2, r0
 8004010:	4293      	cmp	r3, r2
 8004012:	4618      	mov	r0, r3
 8004014:	d101      	bne.n	800401a <memchr+0x12>
 8004016:	2000      	movs	r0, #0
 8004018:	e003      	b.n	8004022 <memchr+0x1a>
 800401a:	7804      	ldrb	r4, [r0, #0]
 800401c:	3301      	adds	r3, #1
 800401e:	428c      	cmp	r4, r1
 8004020:	d1f6      	bne.n	8004010 <memchr+0x8>
 8004022:	bd10      	pop	{r4, pc}

08004024 <memcpy>:
 8004024:	440a      	add	r2, r1
 8004026:	4291      	cmp	r1, r2
 8004028:	f100 33ff 	add.w	r3, r0, #4294967295
 800402c:	d100      	bne.n	8004030 <memcpy+0xc>
 800402e:	4770      	bx	lr
 8004030:	b510      	push	{r4, lr}
 8004032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004036:	4291      	cmp	r1, r2
 8004038:	f803 4f01 	strb.w	r4, [r3, #1]!
 800403c:	d1f9      	bne.n	8004032 <memcpy+0xe>
 800403e:	bd10      	pop	{r4, pc}

08004040 <memmove>:
 8004040:	4288      	cmp	r0, r1
 8004042:	b510      	push	{r4, lr}
 8004044:	eb01 0402 	add.w	r4, r1, r2
 8004048:	d902      	bls.n	8004050 <memmove+0x10>
 800404a:	4284      	cmp	r4, r0
 800404c:	4623      	mov	r3, r4
 800404e:	d807      	bhi.n	8004060 <memmove+0x20>
 8004050:	1e43      	subs	r3, r0, #1
 8004052:	42a1      	cmp	r1, r4
 8004054:	d008      	beq.n	8004068 <memmove+0x28>
 8004056:	f811 2b01 	ldrb.w	r2, [r1], #1
 800405a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800405e:	e7f8      	b.n	8004052 <memmove+0x12>
 8004060:	4601      	mov	r1, r0
 8004062:	4402      	add	r2, r0
 8004064:	428a      	cmp	r2, r1
 8004066:	d100      	bne.n	800406a <memmove+0x2a>
 8004068:	bd10      	pop	{r4, pc}
 800406a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800406e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004072:	e7f7      	b.n	8004064 <memmove+0x24>

08004074 <_free_r>:
 8004074:	b538      	push	{r3, r4, r5, lr}
 8004076:	4605      	mov	r5, r0
 8004078:	2900      	cmp	r1, #0
 800407a:	d040      	beq.n	80040fe <_free_r+0x8a>
 800407c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004080:	1f0c      	subs	r4, r1, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	bfb8      	it	lt
 8004086:	18e4      	addlt	r4, r4, r3
 8004088:	f000 f910 	bl	80042ac <__malloc_lock>
 800408c:	4a1c      	ldr	r2, [pc, #112]	; (8004100 <_free_r+0x8c>)
 800408e:	6813      	ldr	r3, [r2, #0]
 8004090:	b933      	cbnz	r3, 80040a0 <_free_r+0x2c>
 8004092:	6063      	str	r3, [r4, #4]
 8004094:	6014      	str	r4, [r2, #0]
 8004096:	4628      	mov	r0, r5
 8004098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800409c:	f000 b90c 	b.w	80042b8 <__malloc_unlock>
 80040a0:	42a3      	cmp	r3, r4
 80040a2:	d908      	bls.n	80040b6 <_free_r+0x42>
 80040a4:	6820      	ldr	r0, [r4, #0]
 80040a6:	1821      	adds	r1, r4, r0
 80040a8:	428b      	cmp	r3, r1
 80040aa:	bf01      	itttt	eq
 80040ac:	6819      	ldreq	r1, [r3, #0]
 80040ae:	685b      	ldreq	r3, [r3, #4]
 80040b0:	1809      	addeq	r1, r1, r0
 80040b2:	6021      	streq	r1, [r4, #0]
 80040b4:	e7ed      	b.n	8004092 <_free_r+0x1e>
 80040b6:	461a      	mov	r2, r3
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	b10b      	cbz	r3, 80040c0 <_free_r+0x4c>
 80040bc:	42a3      	cmp	r3, r4
 80040be:	d9fa      	bls.n	80040b6 <_free_r+0x42>
 80040c0:	6811      	ldr	r1, [r2, #0]
 80040c2:	1850      	adds	r0, r2, r1
 80040c4:	42a0      	cmp	r0, r4
 80040c6:	d10b      	bne.n	80040e0 <_free_r+0x6c>
 80040c8:	6820      	ldr	r0, [r4, #0]
 80040ca:	4401      	add	r1, r0
 80040cc:	1850      	adds	r0, r2, r1
 80040ce:	4283      	cmp	r3, r0
 80040d0:	6011      	str	r1, [r2, #0]
 80040d2:	d1e0      	bne.n	8004096 <_free_r+0x22>
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4401      	add	r1, r0
 80040da:	6011      	str	r1, [r2, #0]
 80040dc:	6053      	str	r3, [r2, #4]
 80040de:	e7da      	b.n	8004096 <_free_r+0x22>
 80040e0:	d902      	bls.n	80040e8 <_free_r+0x74>
 80040e2:	230c      	movs	r3, #12
 80040e4:	602b      	str	r3, [r5, #0]
 80040e6:	e7d6      	b.n	8004096 <_free_r+0x22>
 80040e8:	6820      	ldr	r0, [r4, #0]
 80040ea:	1821      	adds	r1, r4, r0
 80040ec:	428b      	cmp	r3, r1
 80040ee:	bf01      	itttt	eq
 80040f0:	6819      	ldreq	r1, [r3, #0]
 80040f2:	685b      	ldreq	r3, [r3, #4]
 80040f4:	1809      	addeq	r1, r1, r0
 80040f6:	6021      	streq	r1, [r4, #0]
 80040f8:	6063      	str	r3, [r4, #4]
 80040fa:	6054      	str	r4, [r2, #4]
 80040fc:	e7cb      	b.n	8004096 <_free_r+0x22>
 80040fe:	bd38      	pop	{r3, r4, r5, pc}
 8004100:	20000198 	.word	0x20000198

08004104 <sbrk_aligned>:
 8004104:	b570      	push	{r4, r5, r6, lr}
 8004106:	4e0e      	ldr	r6, [pc, #56]	; (8004140 <sbrk_aligned+0x3c>)
 8004108:	460c      	mov	r4, r1
 800410a:	6831      	ldr	r1, [r6, #0]
 800410c:	4605      	mov	r5, r0
 800410e:	b911      	cbnz	r1, 8004116 <sbrk_aligned+0x12>
 8004110:	f000 f8bc 	bl	800428c <_sbrk_r>
 8004114:	6030      	str	r0, [r6, #0]
 8004116:	4621      	mov	r1, r4
 8004118:	4628      	mov	r0, r5
 800411a:	f000 f8b7 	bl	800428c <_sbrk_r>
 800411e:	1c43      	adds	r3, r0, #1
 8004120:	d00a      	beq.n	8004138 <sbrk_aligned+0x34>
 8004122:	1cc4      	adds	r4, r0, #3
 8004124:	f024 0403 	bic.w	r4, r4, #3
 8004128:	42a0      	cmp	r0, r4
 800412a:	d007      	beq.n	800413c <sbrk_aligned+0x38>
 800412c:	1a21      	subs	r1, r4, r0
 800412e:	4628      	mov	r0, r5
 8004130:	f000 f8ac 	bl	800428c <_sbrk_r>
 8004134:	3001      	adds	r0, #1
 8004136:	d101      	bne.n	800413c <sbrk_aligned+0x38>
 8004138:	f04f 34ff 	mov.w	r4, #4294967295
 800413c:	4620      	mov	r0, r4
 800413e:	bd70      	pop	{r4, r5, r6, pc}
 8004140:	2000019c 	.word	0x2000019c

08004144 <_malloc_r>:
 8004144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004148:	1ccd      	adds	r5, r1, #3
 800414a:	f025 0503 	bic.w	r5, r5, #3
 800414e:	3508      	adds	r5, #8
 8004150:	2d0c      	cmp	r5, #12
 8004152:	bf38      	it	cc
 8004154:	250c      	movcc	r5, #12
 8004156:	2d00      	cmp	r5, #0
 8004158:	4607      	mov	r7, r0
 800415a:	db01      	blt.n	8004160 <_malloc_r+0x1c>
 800415c:	42a9      	cmp	r1, r5
 800415e:	d905      	bls.n	800416c <_malloc_r+0x28>
 8004160:	230c      	movs	r3, #12
 8004162:	2600      	movs	r6, #0
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	4630      	mov	r0, r6
 8004168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800416c:	4e2e      	ldr	r6, [pc, #184]	; (8004228 <_malloc_r+0xe4>)
 800416e:	f000 f89d 	bl	80042ac <__malloc_lock>
 8004172:	6833      	ldr	r3, [r6, #0]
 8004174:	461c      	mov	r4, r3
 8004176:	bb34      	cbnz	r4, 80041c6 <_malloc_r+0x82>
 8004178:	4629      	mov	r1, r5
 800417a:	4638      	mov	r0, r7
 800417c:	f7ff ffc2 	bl	8004104 <sbrk_aligned>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	4604      	mov	r4, r0
 8004184:	d14d      	bne.n	8004222 <_malloc_r+0xde>
 8004186:	6834      	ldr	r4, [r6, #0]
 8004188:	4626      	mov	r6, r4
 800418a:	2e00      	cmp	r6, #0
 800418c:	d140      	bne.n	8004210 <_malloc_r+0xcc>
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	4631      	mov	r1, r6
 8004192:	4638      	mov	r0, r7
 8004194:	eb04 0803 	add.w	r8, r4, r3
 8004198:	f000 f878 	bl	800428c <_sbrk_r>
 800419c:	4580      	cmp	r8, r0
 800419e:	d13a      	bne.n	8004216 <_malloc_r+0xd2>
 80041a0:	6821      	ldr	r1, [r4, #0]
 80041a2:	3503      	adds	r5, #3
 80041a4:	1a6d      	subs	r5, r5, r1
 80041a6:	f025 0503 	bic.w	r5, r5, #3
 80041aa:	3508      	adds	r5, #8
 80041ac:	2d0c      	cmp	r5, #12
 80041ae:	bf38      	it	cc
 80041b0:	250c      	movcc	r5, #12
 80041b2:	4638      	mov	r0, r7
 80041b4:	4629      	mov	r1, r5
 80041b6:	f7ff ffa5 	bl	8004104 <sbrk_aligned>
 80041ba:	3001      	adds	r0, #1
 80041bc:	d02b      	beq.n	8004216 <_malloc_r+0xd2>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	442b      	add	r3, r5
 80041c2:	6023      	str	r3, [r4, #0]
 80041c4:	e00e      	b.n	80041e4 <_malloc_r+0xa0>
 80041c6:	6822      	ldr	r2, [r4, #0]
 80041c8:	1b52      	subs	r2, r2, r5
 80041ca:	d41e      	bmi.n	800420a <_malloc_r+0xc6>
 80041cc:	2a0b      	cmp	r2, #11
 80041ce:	d916      	bls.n	80041fe <_malloc_r+0xba>
 80041d0:	1961      	adds	r1, r4, r5
 80041d2:	42a3      	cmp	r3, r4
 80041d4:	6025      	str	r5, [r4, #0]
 80041d6:	bf18      	it	ne
 80041d8:	6059      	strne	r1, [r3, #4]
 80041da:	6863      	ldr	r3, [r4, #4]
 80041dc:	bf08      	it	eq
 80041de:	6031      	streq	r1, [r6, #0]
 80041e0:	5162      	str	r2, [r4, r5]
 80041e2:	604b      	str	r3, [r1, #4]
 80041e4:	4638      	mov	r0, r7
 80041e6:	f104 060b 	add.w	r6, r4, #11
 80041ea:	f000 f865 	bl	80042b8 <__malloc_unlock>
 80041ee:	f026 0607 	bic.w	r6, r6, #7
 80041f2:	1d23      	adds	r3, r4, #4
 80041f4:	1af2      	subs	r2, r6, r3
 80041f6:	d0b6      	beq.n	8004166 <_malloc_r+0x22>
 80041f8:	1b9b      	subs	r3, r3, r6
 80041fa:	50a3      	str	r3, [r4, r2]
 80041fc:	e7b3      	b.n	8004166 <_malloc_r+0x22>
 80041fe:	6862      	ldr	r2, [r4, #4]
 8004200:	42a3      	cmp	r3, r4
 8004202:	bf0c      	ite	eq
 8004204:	6032      	streq	r2, [r6, #0]
 8004206:	605a      	strne	r2, [r3, #4]
 8004208:	e7ec      	b.n	80041e4 <_malloc_r+0xa0>
 800420a:	4623      	mov	r3, r4
 800420c:	6864      	ldr	r4, [r4, #4]
 800420e:	e7b2      	b.n	8004176 <_malloc_r+0x32>
 8004210:	4634      	mov	r4, r6
 8004212:	6876      	ldr	r6, [r6, #4]
 8004214:	e7b9      	b.n	800418a <_malloc_r+0x46>
 8004216:	230c      	movs	r3, #12
 8004218:	4638      	mov	r0, r7
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	f000 f84c 	bl	80042b8 <__malloc_unlock>
 8004220:	e7a1      	b.n	8004166 <_malloc_r+0x22>
 8004222:	6025      	str	r5, [r4, #0]
 8004224:	e7de      	b.n	80041e4 <_malloc_r+0xa0>
 8004226:	bf00      	nop
 8004228:	20000198 	.word	0x20000198

0800422c <_realloc_r>:
 800422c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004230:	4680      	mov	r8, r0
 8004232:	4614      	mov	r4, r2
 8004234:	460e      	mov	r6, r1
 8004236:	b921      	cbnz	r1, 8004242 <_realloc_r+0x16>
 8004238:	4611      	mov	r1, r2
 800423a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800423e:	f7ff bf81 	b.w	8004144 <_malloc_r>
 8004242:	b92a      	cbnz	r2, 8004250 <_realloc_r+0x24>
 8004244:	f7ff ff16 	bl	8004074 <_free_r>
 8004248:	4625      	mov	r5, r4
 800424a:	4628      	mov	r0, r5
 800424c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004250:	f000 f838 	bl	80042c4 <_malloc_usable_size_r>
 8004254:	4284      	cmp	r4, r0
 8004256:	4607      	mov	r7, r0
 8004258:	d802      	bhi.n	8004260 <_realloc_r+0x34>
 800425a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800425e:	d812      	bhi.n	8004286 <_realloc_r+0x5a>
 8004260:	4621      	mov	r1, r4
 8004262:	4640      	mov	r0, r8
 8004264:	f7ff ff6e 	bl	8004144 <_malloc_r>
 8004268:	4605      	mov	r5, r0
 800426a:	2800      	cmp	r0, #0
 800426c:	d0ed      	beq.n	800424a <_realloc_r+0x1e>
 800426e:	42bc      	cmp	r4, r7
 8004270:	4622      	mov	r2, r4
 8004272:	4631      	mov	r1, r6
 8004274:	bf28      	it	cs
 8004276:	463a      	movcs	r2, r7
 8004278:	f7ff fed4 	bl	8004024 <memcpy>
 800427c:	4631      	mov	r1, r6
 800427e:	4640      	mov	r0, r8
 8004280:	f7ff fef8 	bl	8004074 <_free_r>
 8004284:	e7e1      	b.n	800424a <_realloc_r+0x1e>
 8004286:	4635      	mov	r5, r6
 8004288:	e7df      	b.n	800424a <_realloc_r+0x1e>
	...

0800428c <_sbrk_r>:
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	2300      	movs	r3, #0
 8004290:	4d05      	ldr	r5, [pc, #20]	; (80042a8 <_sbrk_r+0x1c>)
 8004292:	4604      	mov	r4, r0
 8004294:	4608      	mov	r0, r1
 8004296:	602b      	str	r3, [r5, #0]
 8004298:	f7fd fcee 	bl	8001c78 <_sbrk>
 800429c:	1c43      	adds	r3, r0, #1
 800429e:	d102      	bne.n	80042a6 <_sbrk_r+0x1a>
 80042a0:	682b      	ldr	r3, [r5, #0]
 80042a2:	b103      	cbz	r3, 80042a6 <_sbrk_r+0x1a>
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
 80042a8:	200001a0 	.word	0x200001a0

080042ac <__malloc_lock>:
 80042ac:	4801      	ldr	r0, [pc, #4]	; (80042b4 <__malloc_lock+0x8>)
 80042ae:	f000 b811 	b.w	80042d4 <__retarget_lock_acquire_recursive>
 80042b2:	bf00      	nop
 80042b4:	200001a4 	.word	0x200001a4

080042b8 <__malloc_unlock>:
 80042b8:	4801      	ldr	r0, [pc, #4]	; (80042c0 <__malloc_unlock+0x8>)
 80042ba:	f000 b80c 	b.w	80042d6 <__retarget_lock_release_recursive>
 80042be:	bf00      	nop
 80042c0:	200001a4 	.word	0x200001a4

080042c4 <_malloc_usable_size_r>:
 80042c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042c8:	1f18      	subs	r0, r3, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bfbc      	itt	lt
 80042ce:	580b      	ldrlt	r3, [r1, r0]
 80042d0:	18c0      	addlt	r0, r0, r3
 80042d2:	4770      	bx	lr

080042d4 <__retarget_lock_acquire_recursive>:
 80042d4:	4770      	bx	lr

080042d6 <__retarget_lock_release_recursive>:
 80042d6:	4770      	bx	lr

080042d8 <_init>:
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	bf00      	nop
 80042dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042de:	bc08      	pop	{r3}
 80042e0:	469e      	mov	lr, r3
 80042e2:	4770      	bx	lr

080042e4 <_fini>:
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e6:	bf00      	nop
 80042e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ea:	bc08      	pop	{r3}
 80042ec:	469e      	mov	lr, r3
 80042ee:	4770      	bx	lr
