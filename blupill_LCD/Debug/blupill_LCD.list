
blupill_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002018  08002018  00012018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002060  08002060  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002060  08002060  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002060  08002060  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002060  08002060  00012060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002064  08002064  00012064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000001c  08002084  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08002084  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b84  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001438  00000000  00000000  00026bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  00028008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  000287a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015cc1  00000000  00000000  00028eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008bfa  00000000  00000000  0003eb79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c424  00000000  00000000  00047773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c3b97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001de0  00000000  00000000  000c3be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002000 	.word	0x08002000

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002000 	.word	0x08002000

0800014c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000156:	4a38      	ldr	r2, [pc, #224]	; (8000238 <HD44780_Init+0xec>)
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800015c:	4b37      	ldr	r3, [pc, #220]	; (800023c <HD44780_Init+0xf0>)
 800015e:	2208      	movs	r2, #8
 8000160:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000162:	4b37      	ldr	r3, [pc, #220]	; (8000240 <HD44780_Init+0xf4>)
 8000164:	2200      	movs	r2, #0
 8000166:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000168:	4b33      	ldr	r3, [pc, #204]	; (8000238 <HD44780_Init+0xec>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d907      	bls.n	8000180 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000170:	4b33      	ldr	r3, [pc, #204]	; (8000240 <HD44780_Init+0xf4>)
 8000172:	781b      	ldrb	r3, [r3, #0]
 8000174:	f043 0308 	orr.w	r3, r3, #8
 8000178:	b2da      	uxtb	r2, r3
 800017a:	4b31      	ldr	r3, [pc, #196]	; (8000240 <HD44780_Init+0xf4>)
 800017c:	701a      	strb	r2, [r3, #0]
 800017e:	e006      	b.n	800018e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000180:	4b2f      	ldr	r3, [pc, #188]	; (8000240 <HD44780_Init+0xf4>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	f043 0304 	orr.w	r3, r3, #4
 8000188:	b2da      	uxtb	r2, r3
 800018a:	4b2d      	ldr	r3, [pc, #180]	; (8000240 <HD44780_Init+0xf4>)
 800018c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800018e:	f000 f99d 	bl	80004cc <DelayInit>
  HAL_Delay(50);
 8000192:	2032      	movs	r0, #50	; 0x32
 8000194:	f000 fc1c 	bl	80009d0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000198:	4b28      	ldr	r3, [pc, #160]	; (800023c <HD44780_Init+0xf0>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	4618      	mov	r0, r3
 800019e:	f000 f95b 	bl	8000458 <ExpanderWrite>
  HAL_Delay(1000);
 80001a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a6:	f000 fc13 	bl	80009d0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001aa:	2030      	movs	r0, #48	; 0x30
 80001ac:	f000 f943 	bl	8000436 <Write4Bits>
  DelayUS(4500);
 80001b0:	f241 1094 	movw	r0, #4500	; 0x1194
 80001b4:	f000 f9b2 	bl	800051c <DelayUS>

  Write4Bits(0x03 << 4);
 80001b8:	2030      	movs	r0, #48	; 0x30
 80001ba:	f000 f93c 	bl	8000436 <Write4Bits>
  DelayUS(4500);
 80001be:	f241 1094 	movw	r0, #4500	; 0x1194
 80001c2:	f000 f9ab 	bl	800051c <DelayUS>

  Write4Bits(0x03 << 4);
 80001c6:	2030      	movs	r0, #48	; 0x30
 80001c8:	f000 f935 	bl	8000436 <Write4Bits>
  DelayUS(4500);
 80001cc:	f241 1094 	movw	r0, #4500	; 0x1194
 80001d0:	f000 f9a4 	bl	800051c <DelayUS>

  Write4Bits(0x02 << 4);
 80001d4:	2020      	movs	r0, #32
 80001d6:	f000 f92e 	bl	8000436 <Write4Bits>
  DelayUS(100);
 80001da:	2064      	movs	r0, #100	; 0x64
 80001dc:	f000 f99e 	bl	800051c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001e0:	4b17      	ldr	r3, [pc, #92]	; (8000240 <HD44780_Init+0xf4>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	f043 0320 	orr.w	r3, r3, #32
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 f8e6 	bl	80003bc <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001f0:	4b14      	ldr	r3, [pc, #80]	; (8000244 <HD44780_Init+0xf8>)
 80001f2:	2204      	movs	r2, #4
 80001f4:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80001f6:	f000 f875 	bl	80002e4 <HD44780_Display>
  HD44780_Clear();
 80001fa:	f000 f82b 	bl	8000254 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80001fe:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HD44780_Init+0xfc>)
 8000200:	2202      	movs	r2, #2
 8000202:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000204:	4b10      	ldr	r3, [pc, #64]	; (8000248 <HD44780_Init+0xfc>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	f043 0304 	orr.w	r3, r3, #4
 800020c:	b2db      	uxtb	r3, r3
 800020e:	4618      	mov	r0, r3
 8000210:	f000 f8d4 	bl	80003bc <SendCommand>
  DelayUS(4500);
 8000214:	f241 1094 	movw	r0, #4500	; 0x1194
 8000218:	f000 f980 	bl	800051c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800021c:	490b      	ldr	r1, [pc, #44]	; (800024c <HD44780_Init+0x100>)
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f876 	bl	8000310 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000224:	490a      	ldr	r1, [pc, #40]	; (8000250 <HD44780_Init+0x104>)
 8000226:	2001      	movs	r0, #1
 8000228:	f000 f872 	bl	8000310 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800022c:	f000 f81d 	bl	800026a <HD44780_Home>
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	2000003b 	.word	0x2000003b
 800023c:	2000003c 	.word	0x2000003c
 8000240:	20000038 	.word	0x20000038
 8000244:	20000039 	.word	0x20000039
 8000248:	2000003a 	.word	0x2000003a
 800024c:	20000000 	.word	0x20000000
 8000250:	20000008 	.word	0x20000008

08000254 <HD44780_Clear>:

void HD44780_Clear()
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000258:	2001      	movs	r0, #1
 800025a:	f000 f8af 	bl	80003bc <SendCommand>
  DelayUS(2000);
 800025e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000262:	f000 f95b 	bl	800051c <DelayUS>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}

0800026a <HD44780_Home>:

void HD44780_Home()
{
 800026a:	b580      	push	{r7, lr}
 800026c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800026e:	2002      	movs	r0, #2
 8000270:	f000 f8a4 	bl	80003bc <SendCommand>
  DelayUS(2000);
 8000274:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000278:	f000 f950 	bl	800051c <DelayUS>
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}

08000280 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b087      	sub	sp, #28
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	460a      	mov	r2, r1
 800028a:	71fb      	strb	r3, [r7, #7]
 800028c:	4613      	mov	r3, r2
 800028e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <HD44780_SetCursor+0x5c>)
 8000292:	f107 0408 	add.w	r4, r7, #8
 8000296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <HD44780_SetCursor+0x60>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	79ba      	ldrb	r2, [r7, #6]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d303      	bcc.n	80002ae <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <HD44780_SetCursor+0x60>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	3b01      	subs	r3, #1
 80002ac:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	3318      	adds	r3, #24
 80002b4:	443b      	add	r3, r7
 80002b6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	4413      	add	r3, r2
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	b25b      	sxtb	r3, r3
 80002c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002c8:	b25b      	sxtb	r3, r3
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f875 	bl	80003bc <SendCommand>
}
 80002d2:	bf00      	nop
 80002d4:	371c      	adds	r7, #28
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd90      	pop	{r4, r7, pc}
 80002da:	bf00      	nop
 80002dc:	08002018 	.word	0x08002018
 80002e0:	2000003b 	.word	0x2000003b

080002e4 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <HD44780_Display+0x28>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	4b06      	ldr	r3, [pc, #24]	; (800030c <HD44780_Display+0x28>)
 80002f4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <HD44780_Display+0x28>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	f043 0308 	orr.w	r3, r3, #8
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f85b 	bl	80003bc <SendCommand>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000039 	.word	0x20000039

08000310 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	6039      	str	r1, [r7, #0]
 800031a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f003 0307 	and.w	r3, r3, #7
 8000322:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	00db      	lsls	r3, r3, #3
 8000328:	b25b      	sxtb	r3, r3
 800032a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800032e:	b25b      	sxtb	r3, r3
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f842 	bl	80003bc <SendCommand>
  for (int i=0; i<8; i++)
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	e009      	b.n	8000352 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	683a      	ldr	r2, [r7, #0]
 8000342:	4413      	add	r3, r2
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	4618      	mov	r0, r3
 8000348:	f000 f846 	bl	80003d8 <SendChar>
  for (int i=0; i<8; i++)
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	3301      	adds	r3, #1
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2b07      	cmp	r3, #7
 8000356:	ddf2      	ble.n	800033e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000358:	bf00      	nop
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000362:	b580      	push	{r7, lr}
 8000364:	b082      	sub	sp, #8
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800036a:	e006      	b.n	800037a <HD44780_PrintStr+0x18>
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	1c5a      	adds	r2, r3, #1
 8000370:	607a      	str	r2, [r7, #4]
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f82f 	bl	80003d8 <SendChar>
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d1f4      	bne.n	800036c <HD44780_PrintStr+0xa>
}
 8000382:	bf00      	nop
 8000384:	bf00      	nop
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 8000390:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <HD44780_NoBacklight+0x14>)
 8000392:	2200      	movs	r2, #0
 8000394:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000396:	2000      	movs	r0, #0
 8000398:	f000 f85e 	bl	8000458 <ExpanderWrite>
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2000003c 	.word	0x2000003c

080003a4 <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 80003a8:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <HD44780_Backlight+0x14>)
 80003aa:	2208      	movs	r2, #8
 80003ac:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 80003ae:	2000      	movs	r0, #0
 80003b0:	f000 f852 	bl	8000458 <ExpanderWrite>
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	2000003c 	.word	0x2000003c

080003bc <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 f812 	bl	80003f4 <Send>
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	2101      	movs	r1, #1
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 f804 	bl	80003f4 <Send>
}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	460a      	mov	r2, r1
 80003fe:	71fb      	strb	r3, [r7, #7]
 8000400:	4613      	mov	r3, r2
 8000402:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	f023 030f 	bic.w	r3, r3, #15
 800040a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	011b      	lsls	r3, r3, #4
 8000410:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000412:	7bfa      	ldrb	r2, [r7, #15]
 8000414:	79bb      	ldrb	r3, [r7, #6]
 8000416:	4313      	orrs	r3, r2
 8000418:	b2db      	uxtb	r3, r3
 800041a:	4618      	mov	r0, r3
 800041c:	f000 f80b 	bl	8000436 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000420:	7bba      	ldrb	r2, [r7, #14]
 8000422:	79bb      	ldrb	r3, [r7, #6]
 8000424:	4313      	orrs	r3, r2
 8000426:	b2db      	uxtb	r3, r3
 8000428:	4618      	mov	r0, r3
 800042a:	f000 f804 	bl	8000436 <Write4Bits>
}
 800042e:	bf00      	nop
 8000430:	3710      	adds	r7, #16
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b082      	sub	sp, #8
 800043a:	af00      	add	r7, sp, #0
 800043c:	4603      	mov	r3, r0
 800043e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	4618      	mov	r0, r3
 8000444:	f000 f808 	bl	8000458 <ExpanderWrite>
  PulseEnable(value);
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	4618      	mov	r0, r3
 800044c:	f000 f820 	bl	8000490 <PulseEnable>
}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af02      	add	r7, sp, #8
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <ExpanderWrite+0x30>)
 8000464:	781a      	ldrb	r2, [r3, #0]
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	4313      	orrs	r3, r2
 800046a:	b2db      	uxtb	r3, r3
 800046c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800046e:	f107 020f 	add.w	r2, r7, #15
 8000472:	230a      	movs	r3, #10
 8000474:	9300      	str	r3, [sp, #0]
 8000476:	2301      	movs	r3, #1
 8000478:	214e      	movs	r1, #78	; 0x4e
 800047a:	4804      	ldr	r0, [pc, #16]	; (800048c <ExpanderWrite+0x34>)
 800047c:	f000 fe88 	bl	8001190 <HAL_I2C_Master_Transmit>
}
 8000480:	bf00      	nop
 8000482:	3710      	adds	r7, #16
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	2000003c 	.word	0x2000003c
 800048c:	20000040 	.word	0x20000040

08000490 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	f043 0304 	orr.w	r3, r3, #4
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ffd8 	bl	8000458 <ExpanderWrite>
  DelayUS(20);
 80004a8:	2014      	movs	r0, #20
 80004aa:	f000 f837 	bl	800051c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	f023 0304 	bic.w	r3, r3, #4
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff ffce 	bl	8000458 <ExpanderWrite>
  DelayUS(20);
 80004bc:	2014      	movs	r0, #20
 80004be:	f000 f82d 	bl	800051c <DelayUS>
}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <DelayInit>:

static void DelayInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80004d0:	4b10      	ldr	r3, [pc, #64]	; (8000514 <DelayInit+0x48>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	4a0f      	ldr	r2, [pc, #60]	; (8000514 <DelayInit+0x48>)
 80004d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004da:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80004dc:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <DelayInit+0x48>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <DelayInit+0x48>)
 80004e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004e6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <DelayInit+0x4c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <DelayInit+0x4c>)
 80004ee:	f023 0301 	bic.w	r3, r3, #1
 80004f2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <DelayInit+0x4c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <DelayInit+0x4c>)
 80004fa:	f043 0301 	orr.w	r3, r3, #1
 80004fe:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <DelayInit+0x4c>)
 8000502:	2200      	movs	r2, #0
 8000504:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000506:	bf00      	nop
  __ASM volatile ("NOP");
 8000508:	bf00      	nop
  __ASM volatile ("NOP");
 800050a:	bf00      	nop
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	e000edf0 	.word	0xe000edf0
 8000518:	e0001000 	.word	0xe0001000

0800051c <DelayUS>:

static void DelayUS(uint32_t us) {
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <DelayUS+0x40>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <DelayUS+0x44>)
 800052a:	fba2 2303 	umull	r2, r3, r2, r3
 800052e:	0c9a      	lsrs	r2, r3, #18
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	fb02 f303 	mul.w	r3, r2, r3
 8000536:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000538:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <DelayUS+0x48>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <DelayUS+0x48>)
 8000540:	685a      	ldr	r2, [r3, #4]
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	697a      	ldr	r2, [r7, #20]
 800054c:	429a      	cmp	r2, r3
 800054e:	d8f6      	bhi.n	800053e <DelayUS+0x22>
}
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	371c      	adds	r7, #28
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	20000010 	.word	0x20000010
 8000560:	431bde83 	.word	0x431bde83
 8000564:	e0001000 	.word	0xe0001000

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 f9ce 	bl	800090c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f83e 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f8a6 	bl	80006c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000578:	f000 f876 	bl	8000668 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while(1)
	{
	  HD44780_Init(2);
 800057c:	2002      	movs	r0, #2
 800057e:	f7ff fde5 	bl	800014c <HD44780_Init>
	  HD44780_Clear();
 8000582:	f7ff fe67 	bl	8000254 <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 8000586:	2100      	movs	r1, #0
 8000588:	2000      	movs	r0, #0
 800058a:	f7ff fe79 	bl	8000280 <HD44780_SetCursor>
	  HD44780_PrintStr("HELLO");
 800058e:	4815      	ldr	r0, [pc, #84]	; (80005e4 <main+0x7c>)
 8000590:	f7ff fee7 	bl	8000362 <HD44780_PrintStr>
	  HD44780_SetCursor(10,1);
 8000594:	2101      	movs	r1, #1
 8000596:	200a      	movs	r0, #10
 8000598:	f7ff fe72 	bl	8000280 <HD44780_SetCursor>
	  HD44780_PrintStr("WORLD");
 800059c:	4812      	ldr	r0, [pc, #72]	; (80005e8 <main+0x80>)
 800059e:	f7ff fee0 	bl	8000362 <HD44780_PrintStr>
	  HAL_Delay(5000);
 80005a2:	f241 3088 	movw	r0, #5000	; 0x1388
 80005a6:	f000 fa13 	bl	80009d0 <HAL_Delay>
    /* USER CODE END WHILE */

	  HD44780_Clear();
 80005aa:	f7ff fe53 	bl	8000254 <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 80005ae:	2100      	movs	r1, #0
 80005b0:	2000      	movs	r0, #0
 80005b2:	f7ff fe65 	bl	8000280 <HD44780_SetCursor>
	  HD44780_PrintStr("HELLO");
 80005b6:	480b      	ldr	r0, [pc, #44]	; (80005e4 <main+0x7c>)
 80005b8:	f7ff fed3 	bl	8000362 <HD44780_PrintStr>
	  HAL_Delay(2000);
 80005bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005c0:	f000 fa06 	bl	80009d0 <HAL_Delay>
	  HD44780_NoBacklight();
 80005c4:	f7ff fee2 	bl	800038c <HD44780_NoBacklight>
	  HAL_Delay(2000);
 80005c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005cc:	f000 fa00 	bl	80009d0 <HAL_Delay>
	  HD44780_Backlight();
 80005d0:	f7ff fee8 	bl	80003a4 <HD44780_Backlight>
    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005da:	4804      	ldr	r0, [pc, #16]	; (80005ec <main+0x84>)
 80005dc:	f000 fc7c 	bl	8000ed8 <HAL_GPIO_WritePin>
	  HD44780_Init(2);
 80005e0:	e7cc      	b.n	800057c <main+0x14>
 80005e2:	bf00      	nop
 80005e4:	08002028 	.word	0x08002028
 80005e8:	08002030 	.word	0x08002030
 80005ec:	40011000 	.word	0x40011000

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b090      	sub	sp, #64	; 0x40
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	2228      	movs	r2, #40	; 0x28
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fcf6 	bl	8001ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000612:	2302      	movs	r3, #2
 8000614:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000616:	2301      	movs	r3, #1
 8000618:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061a:	2310      	movs	r3, #16
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800061e:	2300      	movs	r3, #0
 8000620:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 0318 	add.w	r3, r7, #24
 8000626:	4618      	mov	r0, r3
 8000628:	f001 f8b8 	bl	800179c <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000632:	f000 f89f 	bl	8000774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fb26 	bl	8001ca0 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800065a:	f000 f88b 	bl	8000774 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3740      	adds	r7, #64	; 0x40
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_I2C1_Init+0x50>)
 800066e:	4a13      	ldr	r2, [pc, #76]	; (80006bc <MX_I2C1_Init+0x54>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000674:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <MX_I2C1_Init+0x58>)
 8000676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800068a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <MX_I2C1_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_I2C1_Init+0x50>)
 80006a6:	f000 fc2f 	bl	8000f08 <HAL_I2C_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b0:	f000 f860 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000040 	.word	0x20000040
 80006bc:	40005400 	.word	0x40005400
 80006c0:	000186a0 	.word	0x000186a0

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d8:	4b24      	ldr	r3, [pc, #144]	; (800076c <MX_GPIO_Init+0xa8>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a23      	ldr	r2, [pc, #140]	; (800076c <MX_GPIO_Init+0xa8>)
 80006de:	f043 0310 	orr.w	r3, r3, #16
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_GPIO_Init+0xa8>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0310 	and.w	r3, r3, #16
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_GPIO_Init+0xa8>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a1d      	ldr	r2, [pc, #116]	; (800076c <MX_GPIO_Init+0xa8>)
 80006f6:	f043 0320 	orr.w	r3, r3, #32
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_GPIO_Init+0xa8>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0320 	and.w	r3, r3, #32
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_GPIO_Init+0xa8>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a17      	ldr	r2, [pc, #92]	; (800076c <MX_GPIO_Init+0xa8>)
 800070e:	f043 0304 	orr.w	r3, r3, #4
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_GPIO_Init+0xa8>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0304 	and.w	r3, r3, #4
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_GPIO_Init+0xa8>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a11      	ldr	r2, [pc, #68]	; (800076c <MX_GPIO_Init+0xa8>)
 8000726:	f043 0308 	orr.w	r3, r3, #8
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_GPIO_Init+0xa8>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0308 	and.w	r3, r3, #8
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073e:	480c      	ldr	r0, [pc, #48]	; (8000770 <MX_GPIO_Init+0xac>)
 8000740:	f000 fbca 	bl	8000ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2302      	movs	r3, #2
 8000754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000756:	f107 0310 	add.w	r3, r7, #16
 800075a:	4619      	mov	r1, r3
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_GPIO_Init+0xac>)
 800075e:	f000 fa3f 	bl	8000be0 <HAL_GPIO_Init>

}
 8000762:	bf00      	nop
 8000764:	3720      	adds	r7, #32
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000
 8000770:	40011000 	.word	0x40011000

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077c:	e7fe      	b.n	800077c <Error_Handler+0x8>
	...

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <HAL_MspInit+0x5c>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	4a14      	ldr	r2, [pc, #80]	; (80007dc <HAL_MspInit+0x5c>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6193      	str	r3, [r2, #24]
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <HAL_MspInit+0x5c>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <HAL_MspInit+0x5c>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <HAL_MspInit+0x5c>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <HAL_MspInit+0x5c>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <HAL_MspInit+0x60>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <HAL_MspInit+0x60>)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010000 	.word	0x40010000

080007e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a16      	ldr	r2, [pc, #88]	; (8000858 <HAL_I2C_MspInit+0x74>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d125      	bne.n	8000850 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <HAL_I2C_MspInit+0x78>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a14      	ldr	r2, [pc, #80]	; (800085c <HAL_I2C_MspInit+0x78>)
 800080a:	f043 0308 	orr.w	r3, r3, #8
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_I2C_MspInit+0x78>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0308 	and.w	r3, r3, #8
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800081c:	23c0      	movs	r3, #192	; 0xc0
 800081e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000820:	2312      	movs	r3, #18
 8000822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000828:	2303      	movs	r3, #3
 800082a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	4619      	mov	r1, r3
 8000832:	480b      	ldr	r0, [pc, #44]	; (8000860 <HAL_I2C_MspInit+0x7c>)
 8000834:	f000 f9d4 	bl	8000be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_I2C_MspInit+0x78>)
 800083a:	69db      	ldr	r3, [r3, #28]
 800083c:	4a07      	ldr	r2, [pc, #28]	; (800085c <HAL_I2C_MspInit+0x78>)
 800083e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000842:	61d3      	str	r3, [r2, #28]
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_I2C_MspInit+0x78>)
 8000846:	69db      	ldr	r3, [r3, #28]
 8000848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40005400 	.word	0x40005400
 800085c:	40021000 	.word	0x40021000
 8000860:	40010c00 	.word	0x40010c00

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <NMI_Handler+0x4>

0800086a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <HardFault_Handler+0x4>

08000870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <MemManage_Handler+0x4>

08000876 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <UsageFault_Handler+0x4>

08000882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008aa:	f000 f875 	bl	8000998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
	...

080008c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008c2:	490d      	ldr	r1, [pc, #52]	; (80008f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008c4:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c8:	e002      	b.n	80008d0 <LoopCopyDataInit>

080008ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ce:	3304      	adds	r3, #4

080008d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d4:	d3f9      	bcc.n	80008ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d6:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008d8:	4c0a      	ldr	r4, [pc, #40]	; (8000904 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008dc:	e001      	b.n	80008e2 <LoopFillZerobss>

080008de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e0:	3204      	adds	r2, #4

080008e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e4:	d3fb      	bcc.n	80008de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008e6:	f7ff ffe4 	bl	80008b2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ea:	f001 fb5d 	bl	8001fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ee:	f7ff fe3b 	bl	8000568 <main>
  bx lr
 80008f2:	4770      	bx	lr
  ldr r0, =_sdata
 80008f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80008fc:	08002068 	.word	0x08002068
  ldr r2, =_sbss
 8000900:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000904:	20000098 	.word	0x20000098

08000908 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000908:	e7fe      	b.n	8000908 <ADC1_2_IRQHandler>
	...

0800090c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <HAL_Init+0x28>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a07      	ldr	r2, [pc, #28]	; (8000934 <HAL_Init+0x28>)
 8000916:	f043 0310 	orr.w	r3, r3, #16
 800091a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091c:	2003      	movs	r0, #3
 800091e:	f000 f92b 	bl	8000b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000922:	200f      	movs	r0, #15
 8000924:	f000 f808 	bl	8000938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000928:	f7ff ff2a 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40022000 	.word	0x40022000

08000938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_InitTick+0x54>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_InitTick+0x58>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4619      	mov	r1, r3
 800094a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000952:	fbb2 f3f3 	udiv	r3, r2, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f935 	bl	8000bc6 <HAL_SYSTICK_Config>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	e00e      	b.n	8000984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b0f      	cmp	r3, #15
 800096a:	d80a      	bhi.n	8000982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800096c:	2200      	movs	r2, #0
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	f000 f90b 	bl	8000b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000978:	4a06      	ldr	r2, [pc, #24]	; (8000994 <HAL_InitTick+0x5c>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097e:	2300      	movs	r3, #0
 8000980:	e000      	b.n	8000984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000010 	.word	0x20000010
 8000990:	20000018 	.word	0x20000018
 8000994:	20000014 	.word	0x20000014

08000998 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <HAL_IncTick+0x1c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_IncTick+0x20>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4413      	add	r3, r2
 80009a8:	4a03      	ldr	r2, [pc, #12]	; (80009b8 <HAL_IncTick+0x20>)
 80009aa:	6013      	str	r3, [r2, #0]
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	20000018 	.word	0x20000018
 80009b8:	20000094 	.word	0x20000094

080009bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return uwTick;
 80009c0:	4b02      	ldr	r3, [pc, #8]	; (80009cc <HAL_GetTick+0x10>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	20000094 	.word	0x20000094

080009d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d8:	f7ff fff0 	bl	80009bc <HAL_GetTick>
 80009dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e8:	d005      	beq.n	80009f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <HAL_Delay+0x44>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4413      	add	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009f6:	bf00      	nop
 80009f8:	f7ff ffe0 	bl	80009bc <HAL_GetTick>
 80009fc:	4602      	mov	r2, r0
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d8f7      	bhi.n	80009f8 <HAL_Delay+0x28>
  {
  }
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000018 	.word	0x20000018

08000a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	60d3      	str	r3, [r2, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <__NVIC_GetPriorityGrouping+0x18>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	f003 0307 	and.w	r3, r3, #7
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db0a      	blt.n	8000aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <__NVIC_SetPriority+0x4c>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	0112      	lsls	r2, r2, #4
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa4:	e00a      	b.n	8000abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4908      	ldr	r1, [pc, #32]	; (8000acc <__NVIC_SetPriority+0x50>)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	3b04      	subs	r3, #4
 8000ab4:	0112      	lsls	r2, r2, #4
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	440b      	add	r3, r1
 8000aba:	761a      	strb	r2, [r3, #24]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f1c3 0307 	rsb	r3, r3, #7
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	bf28      	it	cs
 8000aee:	2304      	movcs	r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3304      	adds	r3, #4
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d902      	bls.n	8000b00 <NVIC_EncodePriority+0x30>
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3b03      	subs	r3, #3
 8000afe:	e000      	b.n	8000b02 <NVIC_EncodePriority+0x32>
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	f04f 32ff 	mov.w	r2, #4294967295
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	401a      	ands	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43d9      	mvns	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	4313      	orrs	r3, r2
         );
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	; 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b44:	d301      	bcc.n	8000b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00f      	b.n	8000b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <SysTick_Config+0x40>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b52:	210f      	movs	r1, #15
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f7ff ff90 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <SysTick_Config+0x40>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SysTick_Config+0x40>)
 8000b64:	2207      	movs	r2, #7
 8000b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	e000e010 	.word	0xe000e010

08000b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff49 	bl	8000a18 <__NVIC_SetPriorityGrouping>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba0:	f7ff ff5e 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8000ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	6978      	ldr	r0, [r7, #20]
 8000bac:	f7ff ff90 	bl	8000ad0 <NVIC_EncodePriority>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff5f 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffb0 	bl	8000b34 <SysTick_Config>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b08b      	sub	sp, #44	; 0x2c
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf2:	e161      	b.n	8000eb8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	69fa      	ldr	r2, [r7, #28]
 8000c04:	4013      	ands	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	f040 8150 	bne.w	8000eb2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	4a97      	ldr	r2, [pc, #604]	; (8000e74 <HAL_GPIO_Init+0x294>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d05e      	beq.n	8000cda <HAL_GPIO_Init+0xfa>
 8000c1c:	4a95      	ldr	r2, [pc, #596]	; (8000e74 <HAL_GPIO_Init+0x294>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d875      	bhi.n	8000d0e <HAL_GPIO_Init+0x12e>
 8000c22:	4a95      	ldr	r2, [pc, #596]	; (8000e78 <HAL_GPIO_Init+0x298>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d058      	beq.n	8000cda <HAL_GPIO_Init+0xfa>
 8000c28:	4a93      	ldr	r2, [pc, #588]	; (8000e78 <HAL_GPIO_Init+0x298>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d86f      	bhi.n	8000d0e <HAL_GPIO_Init+0x12e>
 8000c2e:	4a93      	ldr	r2, [pc, #588]	; (8000e7c <HAL_GPIO_Init+0x29c>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d052      	beq.n	8000cda <HAL_GPIO_Init+0xfa>
 8000c34:	4a91      	ldr	r2, [pc, #580]	; (8000e7c <HAL_GPIO_Init+0x29c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d869      	bhi.n	8000d0e <HAL_GPIO_Init+0x12e>
 8000c3a:	4a91      	ldr	r2, [pc, #580]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d04c      	beq.n	8000cda <HAL_GPIO_Init+0xfa>
 8000c40:	4a8f      	ldr	r2, [pc, #572]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d863      	bhi.n	8000d0e <HAL_GPIO_Init+0x12e>
 8000c46:	4a8f      	ldr	r2, [pc, #572]	; (8000e84 <HAL_GPIO_Init+0x2a4>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d046      	beq.n	8000cda <HAL_GPIO_Init+0xfa>
 8000c4c:	4a8d      	ldr	r2, [pc, #564]	; (8000e84 <HAL_GPIO_Init+0x2a4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d85d      	bhi.n	8000d0e <HAL_GPIO_Init+0x12e>
 8000c52:	2b12      	cmp	r3, #18
 8000c54:	d82a      	bhi.n	8000cac <HAL_GPIO_Init+0xcc>
 8000c56:	2b12      	cmp	r3, #18
 8000c58:	d859      	bhi.n	8000d0e <HAL_GPIO_Init+0x12e>
 8000c5a:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <HAL_GPIO_Init+0x80>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000cdb 	.word	0x08000cdb
 8000c64:	08000cb5 	.word	0x08000cb5
 8000c68:	08000cc7 	.word	0x08000cc7
 8000c6c:	08000d09 	.word	0x08000d09
 8000c70:	08000d0f 	.word	0x08000d0f
 8000c74:	08000d0f 	.word	0x08000d0f
 8000c78:	08000d0f 	.word	0x08000d0f
 8000c7c:	08000d0f 	.word	0x08000d0f
 8000c80:	08000d0f 	.word	0x08000d0f
 8000c84:	08000d0f 	.word	0x08000d0f
 8000c88:	08000d0f 	.word	0x08000d0f
 8000c8c:	08000d0f 	.word	0x08000d0f
 8000c90:	08000d0f 	.word	0x08000d0f
 8000c94:	08000d0f 	.word	0x08000d0f
 8000c98:	08000d0f 	.word	0x08000d0f
 8000c9c:	08000d0f 	.word	0x08000d0f
 8000ca0:	08000d0f 	.word	0x08000d0f
 8000ca4:	08000cbd 	.word	0x08000cbd
 8000ca8:	08000cd1 	.word	0x08000cd1
 8000cac:	4a76      	ldr	r2, [pc, #472]	; (8000e88 <HAL_GPIO_Init+0x2a8>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d013      	beq.n	8000cda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cb2:	e02c      	b.n	8000d0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	623b      	str	r3, [r7, #32]
          break;
 8000cba:	e029      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	623b      	str	r3, [r7, #32]
          break;
 8000cc4:	e024      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	3308      	adds	r3, #8
 8000ccc:	623b      	str	r3, [r7, #32]
          break;
 8000cce:	e01f      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	330c      	adds	r3, #12
 8000cd6:	623b      	str	r3, [r7, #32]
          break;
 8000cd8:	e01a      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d102      	bne.n	8000ce8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	623b      	str	r3, [r7, #32]
          break;
 8000ce6:	e013      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d105      	bne.n	8000cfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69fa      	ldr	r2, [r7, #28]
 8000cf8:	611a      	str	r2, [r3, #16]
          break;
 8000cfa:	e009      	b.n	8000d10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	69fa      	ldr	r2, [r7, #28]
 8000d04:	615a      	str	r2, [r3, #20]
          break;
 8000d06:	e003      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
          break;
 8000d0c:	e000      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          break;
 8000d0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	2bff      	cmp	r3, #255	; 0xff
 8000d14:	d801      	bhi.n	8000d1a <HAL_GPIO_Init+0x13a>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	e001      	b.n	8000d1e <HAL_GPIO_Init+0x13e>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	2bff      	cmp	r3, #255	; 0xff
 8000d24:	d802      	bhi.n	8000d2c <HAL_GPIO_Init+0x14c>
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	e002      	b.n	8000d32 <HAL_GPIO_Init+0x152>
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	3b08      	subs	r3, #8
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	210f      	movs	r1, #15
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	401a      	ands	r2, r3
 8000d44:	6a39      	ldr	r1, [r7, #32]
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f000 80a9 	beq.w	8000eb2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d60:	4b4a      	ldr	r3, [pc, #296]	; (8000e8c <HAL_GPIO_Init+0x2ac>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a49      	ldr	r2, [pc, #292]	; (8000e8c <HAL_GPIO_Init+0x2ac>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <HAL_GPIO_Init+0x2ac>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d78:	4a45      	ldr	r2, [pc, #276]	; (8000e90 <HAL_GPIO_Init+0x2b0>)
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7c:	089b      	lsrs	r3, r3, #2
 8000d7e:	3302      	adds	r3, #2
 8000d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	220f      	movs	r2, #15
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a3d      	ldr	r2, [pc, #244]	; (8000e94 <HAL_GPIO_Init+0x2b4>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d00d      	beq.n	8000dc0 <HAL_GPIO_Init+0x1e0>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a3c      	ldr	r2, [pc, #240]	; (8000e98 <HAL_GPIO_Init+0x2b8>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d007      	beq.n	8000dbc <HAL_GPIO_Init+0x1dc>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a3b      	ldr	r2, [pc, #236]	; (8000e9c <HAL_GPIO_Init+0x2bc>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d101      	bne.n	8000db8 <HAL_GPIO_Init+0x1d8>
 8000db4:	2302      	movs	r3, #2
 8000db6:	e004      	b.n	8000dc2 <HAL_GPIO_Init+0x1e2>
 8000db8:	2303      	movs	r3, #3
 8000dba:	e002      	b.n	8000dc2 <HAL_GPIO_Init+0x1e2>
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e000      	b.n	8000dc2 <HAL_GPIO_Init+0x1e2>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dc4:	f002 0203 	and.w	r2, r2, #3
 8000dc8:	0092      	lsls	r2, r2, #2
 8000dca:	4093      	lsls	r3, r2
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dd2:	492f      	ldr	r1, [pc, #188]	; (8000e90 <HAL_GPIO_Init+0x2b0>)
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	089b      	lsrs	r3, r3, #2
 8000dd8:	3302      	adds	r3, #2
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d006      	beq.n	8000dfa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dec:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <HAL_GPIO_Init+0x2c0>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	492b      	ldr	r1, [pc, #172]	; (8000ea0 <HAL_GPIO_Init+0x2c0>)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	600b      	str	r3, [r1, #0]
 8000df8:	e006      	b.n	8000e08 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dfa:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <HAL_GPIO_Init+0x2c0>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	4927      	ldr	r1, [pc, #156]	; (8000ea0 <HAL_GPIO_Init+0x2c0>)
 8000e04:	4013      	ands	r3, r2
 8000e06:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d006      	beq.n	8000e22 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e14:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <HAL_GPIO_Init+0x2c0>)
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	4921      	ldr	r1, [pc, #132]	; (8000ea0 <HAL_GPIO_Init+0x2c0>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	604b      	str	r3, [r1, #4]
 8000e20:	e006      	b.n	8000e30 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <HAL_GPIO_Init+0x2c0>)
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	491d      	ldr	r1, [pc, #116]	; (8000ea0 <HAL_GPIO_Init+0x2c0>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d006      	beq.n	8000e4a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_GPIO_Init+0x2c0>)
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	4917      	ldr	r1, [pc, #92]	; (8000ea0 <HAL_GPIO_Init+0x2c0>)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	608b      	str	r3, [r1, #8]
 8000e48:	e006      	b.n	8000e58 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_GPIO_Init+0x2c0>)
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	4913      	ldr	r1, [pc, #76]	; (8000ea0 <HAL_GPIO_Init+0x2c0>)
 8000e54:	4013      	ands	r3, r2
 8000e56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d01f      	beq.n	8000ea4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_GPIO_Init+0x2c0>)
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	490d      	ldr	r1, [pc, #52]	; (8000ea0 <HAL_GPIO_Init+0x2c0>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	60cb      	str	r3, [r1, #12]
 8000e70:	e01f      	b.n	8000eb2 <HAL_GPIO_Init+0x2d2>
 8000e72:	bf00      	nop
 8000e74:	10320000 	.word	0x10320000
 8000e78:	10310000 	.word	0x10310000
 8000e7c:	10220000 	.word	0x10220000
 8000e80:	10210000 	.word	0x10210000
 8000e84:	10120000 	.word	0x10120000
 8000e88:	10110000 	.word	0x10110000
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010000 	.word	0x40010000
 8000e94:	40010800 	.word	0x40010800
 8000e98:	40010c00 	.word	0x40010c00
 8000e9c:	40011000 	.word	0x40011000
 8000ea0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_GPIO_Init+0x2f4>)
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	4909      	ldr	r1, [pc, #36]	; (8000ed4 <HAL_GPIO_Init+0x2f4>)
 8000eae:	4013      	ands	r3, r2
 8000eb0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f47f ae96 	bne.w	8000bf4 <HAL_GPIO_Init+0x14>
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	372c      	adds	r7, #44	; 0x2c
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	40010400 	.word	0x40010400

08000ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee8:	787b      	ldrb	r3, [r7, #1]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eee:	887a      	ldrh	r2, [r7, #2]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ef4:	e003      	b.n	8000efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ef6:	887b      	ldrh	r3, [r7, #2]
 8000ef8:	041a      	lsls	r2, r3, #16
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	611a      	str	r2, [r3, #16]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e12b      	b.n	8001172 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d106      	bne.n	8000f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff fc58 	bl	80007e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2224      	movs	r2, #36	; 0x24
 8000f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0201 	bic.w	r2, r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f6c:	f000 ffea 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
 8000f70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	4a81      	ldr	r2, [pc, #516]	; (800117c <HAL_I2C_Init+0x274>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d807      	bhi.n	8000f8c <HAL_I2C_Init+0x84>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4a80      	ldr	r2, [pc, #512]	; (8001180 <HAL_I2C_Init+0x278>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	bf94      	ite	ls
 8000f84:	2301      	movls	r3, #1
 8000f86:	2300      	movhi	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	e006      	b.n	8000f9a <HAL_I2C_Init+0x92>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4a7d      	ldr	r2, [pc, #500]	; (8001184 <HAL_I2C_Init+0x27c>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	bf94      	ite	ls
 8000f94:	2301      	movls	r3, #1
 8000f96:	2300      	movhi	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e0e7      	b.n	8001172 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4a78      	ldr	r2, [pc, #480]	; (8001188 <HAL_I2C_Init+0x280>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	0c9b      	lsrs	r3, r3, #18
 8000fac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	4a6a      	ldr	r2, [pc, #424]	; (800117c <HAL_I2C_Init+0x274>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d802      	bhi.n	8000fdc <HAL_I2C_Init+0xd4>
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	e009      	b.n	8000ff0 <HAL_I2C_Init+0xe8>
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fe2:	fb02 f303 	mul.w	r3, r2, r3
 8000fe6:	4a69      	ldr	r2, [pc, #420]	; (800118c <HAL_I2C_Init+0x284>)
 8000fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fec:	099b      	lsrs	r3, r3, #6
 8000fee:	3301      	adds	r3, #1
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6812      	ldr	r2, [r2, #0]
 8000ff4:	430b      	orrs	r3, r1
 8000ff6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001002:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	495c      	ldr	r1, [pc, #368]	; (800117c <HAL_I2C_Init+0x274>)
 800100c:	428b      	cmp	r3, r1
 800100e:	d819      	bhi.n	8001044 <HAL_I2C_Init+0x13c>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	1e59      	subs	r1, r3, #1
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fbb1 f3f3 	udiv	r3, r1, r3
 800101e:	1c59      	adds	r1, r3, #1
 8001020:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001024:	400b      	ands	r3, r1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00a      	beq.n	8001040 <HAL_I2C_Init+0x138>
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	1e59      	subs	r1, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fbb1 f3f3 	udiv	r3, r1, r3
 8001038:	3301      	adds	r3, #1
 800103a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800103e:	e051      	b.n	80010e4 <HAL_I2C_Init+0x1dc>
 8001040:	2304      	movs	r3, #4
 8001042:	e04f      	b.n	80010e4 <HAL_I2C_Init+0x1dc>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d111      	bne.n	8001070 <HAL_I2C_Init+0x168>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	1e58      	subs	r0, r3, #1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6859      	ldr	r1, [r3, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	440b      	add	r3, r1
 800105a:	fbb0 f3f3 	udiv	r3, r0, r3
 800105e:	3301      	adds	r3, #1
 8001060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001064:	2b00      	cmp	r3, #0
 8001066:	bf0c      	ite	eq
 8001068:	2301      	moveq	r3, #1
 800106a:	2300      	movne	r3, #0
 800106c:	b2db      	uxtb	r3, r3
 800106e:	e012      	b.n	8001096 <HAL_I2C_Init+0x18e>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	1e58      	subs	r0, r3, #1
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6859      	ldr	r1, [r3, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	0099      	lsls	r1, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	fbb0 f3f3 	udiv	r3, r0, r3
 8001086:	3301      	adds	r3, #1
 8001088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800108c:	2b00      	cmp	r3, #0
 800108e:	bf0c      	ite	eq
 8001090:	2301      	moveq	r3, #1
 8001092:	2300      	movne	r3, #0
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_I2C_Init+0x196>
 800109a:	2301      	movs	r3, #1
 800109c:	e022      	b.n	80010e4 <HAL_I2C_Init+0x1dc>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10e      	bne.n	80010c4 <HAL_I2C_Init+0x1bc>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1e58      	subs	r0, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6859      	ldr	r1, [r3, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	440b      	add	r3, r1
 80010b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80010b8:	3301      	adds	r3, #1
 80010ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010c2:	e00f      	b.n	80010e4 <HAL_I2C_Init+0x1dc>
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	1e58      	subs	r0, r3, #1
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6859      	ldr	r1, [r3, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	0099      	lsls	r1, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	6809      	ldr	r1, [r1, #0]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69da      	ldr	r2, [r3, #28]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001112:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6911      	ldr	r1, [r2, #16]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68d2      	ldr	r2, [r2, #12]
 800111e:	4311      	orrs	r1, r2
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	430b      	orrs	r3, r1
 8001126:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695a      	ldr	r2, [r3, #20]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0201 	orr.w	r2, r2, #1
 8001152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2220      	movs	r2, #32
 800115e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	000186a0 	.word	0x000186a0
 8001180:	001e847f 	.word	0x001e847f
 8001184:	003d08ff 	.word	0x003d08ff
 8001188:	431bde83 	.word	0x431bde83
 800118c:	10624dd3 	.word	0x10624dd3

08001190 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	461a      	mov	r2, r3
 800119c:	460b      	mov	r3, r1
 800119e:	817b      	strh	r3, [r7, #10]
 80011a0:	4613      	mov	r3, r2
 80011a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff fc0a 	bl	80009bc <HAL_GetTick>
 80011a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b20      	cmp	r3, #32
 80011b4:	f040 80e0 	bne.w	8001378 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2319      	movs	r3, #25
 80011be:	2201      	movs	r2, #1
 80011c0:	4970      	ldr	r1, [pc, #448]	; (8001384 <HAL_I2C_Master_Transmit+0x1f4>)
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f000 f964 	bl	8001490 <I2C_WaitOnFlagUntilTimeout>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80011ce:	2302      	movs	r3, #2
 80011d0:	e0d3      	b.n	800137a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_I2C_Master_Transmit+0x50>
 80011dc:	2302      	movs	r3, #2
 80011de:	e0cc      	b.n	800137a <HAL_I2C_Master_Transmit+0x1ea>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d007      	beq.n	8001206 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 0201 	orr.w	r2, r2, #1
 8001204:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001214:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2221      	movs	r2, #33	; 0x21
 800121a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2210      	movs	r2, #16
 8001222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	893a      	ldrh	r2, [r7, #8]
 8001236:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800123c:	b29a      	uxth	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4a50      	ldr	r2, [pc, #320]	; (8001388 <HAL_I2C_Master_Transmit+0x1f8>)
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001248:	8979      	ldrh	r1, [r7, #10]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	6a3a      	ldr	r2, [r7, #32]
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f000 f89c 	bl	800138c <I2C_MasterRequestWrite>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e08d      	b.n	800137a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001274:	e066      	b.n	8001344 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	6a39      	ldr	r1, [r7, #32]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 f9de 	bl	800163c <I2C_WaitOnTXEFlagUntilTimeout>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00d      	beq.n	80012a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	2b04      	cmp	r3, #4
 800128c:	d107      	bne.n	800129e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800129c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e06b      	b.n	800137a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012bc:	b29b      	uxth	r3, r3
 80012be:	3b01      	subs	r3, #1
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ca:	3b01      	subs	r3, #1
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d11b      	bne.n	8001318 <HAL_I2C_Master_Transmit+0x188>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d017      	beq.n	8001318 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	781a      	ldrb	r2, [r3, #0]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001302:	b29b      	uxth	r3, r3
 8001304:	3b01      	subs	r3, #1
 8001306:	b29a      	uxth	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001310:	3b01      	subs	r3, #1
 8001312:	b29a      	uxth	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	6a39      	ldr	r1, [r7, #32]
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f000 f9ce 	bl	80016be <I2C_WaitOnBTFFlagUntilTimeout>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00d      	beq.n	8001344 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	2b04      	cmp	r3, #4
 800132e:	d107      	bne.n	8001340 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800133e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e01a      	b.n	800137a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001348:	2b00      	cmp	r3, #0
 800134a:	d194      	bne.n	8001276 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800135a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2220      	movs	r2, #32
 8001360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	e000      	b.n	800137a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001378:	2302      	movs	r3, #2
  }
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	00100002 	.word	0x00100002
 8001388:	ffff0000 	.word	0xffff0000

0800138c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af02      	add	r7, sp, #8
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	460b      	mov	r3, r1
 800139a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d006      	beq.n	80013b6 <I2C_MasterRequestWrite+0x2a>
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d003      	beq.n	80013b6 <I2C_MasterRequestWrite+0x2a>
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80013b4:	d108      	bne.n	80013c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	e00b      	b.n	80013e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	2b12      	cmp	r3, #18
 80013ce:	d107      	bne.n	80013e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f000 f84f 	bl	8001490 <I2C_WaitOnFlagUntilTimeout>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00d      	beq.n	8001414 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001406:	d103      	bne.n	8001410 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800140e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e035      	b.n	8001480 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800141c:	d108      	bne.n	8001430 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800141e:	897b      	ldrh	r3, [r7, #10]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800142c:	611a      	str	r2, [r3, #16]
 800142e:	e01b      	b.n	8001468 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001430:	897b      	ldrh	r3, [r7, #10]
 8001432:	11db      	asrs	r3, r3, #7
 8001434:	b2db      	uxtb	r3, r3
 8001436:	f003 0306 	and.w	r3, r3, #6
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f063 030f 	orn	r3, r3, #15
 8001440:	b2da      	uxtb	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	490e      	ldr	r1, [pc, #56]	; (8001488 <I2C_MasterRequestWrite+0xfc>)
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 f875 	bl	800153e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e010      	b.n	8001480 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800145e:	897b      	ldrh	r3, [r7, #10]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4907      	ldr	r1, [pc, #28]	; (800148c <I2C_MasterRequestWrite+0x100>)
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f000 f865 	bl	800153e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	00010008 	.word	0x00010008
 800148c:	00010002 	.word	0x00010002

08001490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	4613      	mov	r3, r2
 800149e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014a0:	e025      	b.n	80014ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a8:	d021      	beq.n	80014ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014aa:	f7ff fa87 	bl	80009bc <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d302      	bcc.n	80014c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d116      	bne.n	80014ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2220      	movs	r2, #32
 80014ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f043 0220 	orr.w	r2, r3, #32
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e023      	b.n	8001536 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	0c1b      	lsrs	r3, r3, #16
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d10d      	bne.n	8001514 <I2C_WaitOnFlagUntilTimeout+0x84>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4013      	ands	r3, r2
 8001504:	b29b      	uxth	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	bf0c      	ite	eq
 800150a:	2301      	moveq	r3, #1
 800150c:	2300      	movne	r3, #0
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	e00c      	b.n	800152e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	43da      	mvns	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4013      	ands	r3, r2
 8001520:	b29b      	uxth	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	bf0c      	ite	eq
 8001526:	2301      	moveq	r3, #1
 8001528:	2300      	movne	r3, #0
 800152a:	b2db      	uxtb	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	429a      	cmp	r2, r3
 8001532:	d0b6      	beq.n	80014a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b084      	sub	sp, #16
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800154c:	e051      	b.n	80015f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800155c:	d123      	bne.n	80015a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800156c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001576:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2220      	movs	r2, #32
 8001582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f043 0204 	orr.w	r2, r3, #4
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e046      	b.n	8001634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d021      	beq.n	80015f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ae:	f7ff fa05 	bl	80009bc <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d302      	bcc.n	80015c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d116      	bne.n	80015f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2220      	movs	r2, #32
 80015ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f043 0220 	orr.w	r2, r3, #32
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e020      	b.n	8001634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	0c1b      	lsrs	r3, r3, #16
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d10c      	bne.n	8001616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	43da      	mvns	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4013      	ands	r3, r2
 8001608:	b29b      	uxth	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	bf14      	ite	ne
 800160e:	2301      	movne	r3, #1
 8001610:	2300      	moveq	r3, #0
 8001612:	b2db      	uxtb	r3, r3
 8001614:	e00b      	b.n	800162e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	43da      	mvns	r2, r3
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	4013      	ands	r3, r2
 8001622:	b29b      	uxth	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	bf14      	ite	ne
 8001628:	2301      	movne	r3, #1
 800162a:	2300      	moveq	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d18d      	bne.n	800154e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001648:	e02d      	b.n	80016a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 f878 	bl	8001740 <I2C_IsAcknowledgeFailed>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e02d      	b.n	80016b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001660:	d021      	beq.n	80016a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001662:	f7ff f9ab 	bl	80009bc <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	429a      	cmp	r2, r3
 8001670:	d302      	bcc.n	8001678 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d116      	bne.n	80016a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2220      	movs	r2, #32
 8001682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f043 0220 	orr.w	r2, r3, #32
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e007      	b.n	80016b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b0:	2b80      	cmp	r3, #128	; 0x80
 80016b2:	d1ca      	bne.n	800164a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	60f8      	str	r0, [r7, #12]
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80016ca:	e02d      	b.n	8001728 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f000 f837 	bl	8001740 <I2C_IsAcknowledgeFailed>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e02d      	b.n	8001738 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e2:	d021      	beq.n	8001728 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016e4:	f7ff f96a 	bl	80009bc <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d302      	bcc.n	80016fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d116      	bne.n	8001728 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2220      	movs	r2, #32
 8001704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	f043 0220 	orr.w	r2, r3, #32
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e007      	b.n	8001738 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b04      	cmp	r3, #4
 8001734:	d1ca      	bne.n	80016cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001756:	d11b      	bne.n	8001790 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001760:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2220      	movs	r2, #32
 800176c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f043 0204 	orr.w	r2, r3, #4
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e272      	b.n	8001c94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 8087 	beq.w	80018ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017bc:	4b92      	ldr	r3, [pc, #584]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d00c      	beq.n	80017e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017c8:	4b8f      	ldr	r3, [pc, #572]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d112      	bne.n	80017fa <HAL_RCC_OscConfig+0x5e>
 80017d4:	4b8c      	ldr	r3, [pc, #560]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e0:	d10b      	bne.n	80017fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e2:	4b89      	ldr	r3, [pc, #548]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d06c      	beq.n	80018c8 <HAL_RCC_OscConfig+0x12c>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d168      	bne.n	80018c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e24c      	b.n	8001c94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001802:	d106      	bne.n	8001812 <HAL_RCC_OscConfig+0x76>
 8001804:	4b80      	ldr	r3, [pc, #512]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a7f      	ldr	r2, [pc, #508]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 800180a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e02e      	b.n	8001870 <HAL_RCC_OscConfig+0xd4>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0x98>
 800181a:	4b7b      	ldr	r3, [pc, #492]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a7a      	ldr	r2, [pc, #488]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b78      	ldr	r3, [pc, #480]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a77      	ldr	r2, [pc, #476]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 800182c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e01d      	b.n	8001870 <HAL_RCC_OscConfig+0xd4>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0xbc>
 800183e:	4b72      	ldr	r3, [pc, #456]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a71      	ldr	r2, [pc, #452]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b6f      	ldr	r3, [pc, #444]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a6e      	ldr	r2, [pc, #440]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0xd4>
 8001858:	4b6b      	ldr	r3, [pc, #428]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a6a      	ldr	r2, [pc, #424]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 800185e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b68      	ldr	r3, [pc, #416]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a67      	ldr	r2, [pc, #412]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 800186a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d013      	beq.n	80018a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff f8a0 	bl	80009bc <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff f89c 	bl	80009bc <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e200      	b.n	8001c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	4b5d      	ldr	r3, [pc, #372]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0xe4>
 800189e:	e014      	b.n	80018ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff f88c 	bl	80009bc <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff f888 	bl	80009bc <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e1ec      	b.n	8001c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ba:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x10c>
 80018c6:	e000      	b.n	80018ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d063      	beq.n	800199e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018d6:	4b4c      	ldr	r3, [pc, #304]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00b      	beq.n	80018fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018e2:	4b49      	ldr	r3, [pc, #292]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d11c      	bne.n	8001928 <HAL_RCC_OscConfig+0x18c>
 80018ee:	4b46      	ldr	r3, [pc, #280]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d116      	bne.n	8001928 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fa:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_RCC_OscConfig+0x176>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d001      	beq.n	8001912 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e1c0      	b.n	8001c94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001912:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4939      	ldr	r1, [pc, #228]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001926:	e03a      	b.n	800199e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d020      	beq.n	8001972 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7ff f841 	bl	80009bc <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193e:	f7ff f83d 	bl	80009bc <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e1a1      	b.n	8001c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001950:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195c:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4927      	ldr	r1, [pc, #156]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 800196c:	4313      	orrs	r3, r2
 800196e:	600b      	str	r3, [r1, #0]
 8001970:	e015      	b.n	800199e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001972:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff f820 	bl	80009bc <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001980:	f7ff f81c 	bl	80009bc <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e180      	b.n	8001c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d03a      	beq.n	8001a20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d019      	beq.n	80019e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_RCC_OscConfig+0x274>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b8:	f7ff f800 	bl	80009bc <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c0:	f7fe fffc 	bl	80009bc <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e160      	b.n	8001c94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019de:	2001      	movs	r0, #1
 80019e0:	f000 fac4 	bl	8001f6c <RCC_Delay>
 80019e4:	e01c      	b.n	8001a20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_RCC_OscConfig+0x274>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ec:	f7fe ffe6 	bl	80009bc <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f2:	e00f      	b.n	8001a14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f4:	f7fe ffe2 	bl	80009bc <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d908      	bls.n	8001a14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e146      	b.n	8001c94 <HAL_RCC_OscConfig+0x4f8>
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	42420000 	.word	0x42420000
 8001a10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a14:	4b92      	ldr	r3, [pc, #584]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1e9      	bne.n	80019f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80a6 	beq.w	8001b7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a32:	4b8b      	ldr	r3, [pc, #556]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10d      	bne.n	8001a5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	4b88      	ldr	r3, [pc, #544]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	4a87      	ldr	r2, [pc, #540]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a48:	61d3      	str	r3, [r2, #28]
 8001a4a:	4b85      	ldr	r3, [pc, #532]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a56:	2301      	movs	r3, #1
 8001a58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5a:	4b82      	ldr	r3, [pc, #520]	; (8001c64 <HAL_RCC_OscConfig+0x4c8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d118      	bne.n	8001a98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a66:	4b7f      	ldr	r3, [pc, #508]	; (8001c64 <HAL_RCC_OscConfig+0x4c8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a7e      	ldr	r2, [pc, #504]	; (8001c64 <HAL_RCC_OscConfig+0x4c8>)
 8001a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a72:	f7fe ffa3 	bl	80009bc <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7a:	f7fe ff9f 	bl	80009bc <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b64      	cmp	r3, #100	; 0x64
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e103      	b.n	8001c94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	4b75      	ldr	r3, [pc, #468]	; (8001c64 <HAL_RCC_OscConfig+0x4c8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d106      	bne.n	8001aae <HAL_RCC_OscConfig+0x312>
 8001aa0:	4b6f      	ldr	r3, [pc, #444]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	4a6e      	ldr	r2, [pc, #440]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6213      	str	r3, [r2, #32]
 8001aac:	e02d      	b.n	8001b0a <HAL_RCC_OscConfig+0x36e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x334>
 8001ab6:	4b6a      	ldr	r3, [pc, #424]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	4a69      	ldr	r2, [pc, #420]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	6213      	str	r3, [r2, #32]
 8001ac2:	4b67      	ldr	r3, [pc, #412]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4a66      	ldr	r2, [pc, #408]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	f023 0304 	bic.w	r3, r3, #4
 8001acc:	6213      	str	r3, [r2, #32]
 8001ace:	e01c      	b.n	8001b0a <HAL_RCC_OscConfig+0x36e>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b05      	cmp	r3, #5
 8001ad6:	d10c      	bne.n	8001af2 <HAL_RCC_OscConfig+0x356>
 8001ad8:	4b61      	ldr	r3, [pc, #388]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4a60      	ldr	r2, [pc, #384]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	f043 0304 	orr.w	r3, r3, #4
 8001ae2:	6213      	str	r3, [r2, #32]
 8001ae4:	4b5e      	ldr	r3, [pc, #376]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	4a5d      	ldr	r2, [pc, #372]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6213      	str	r3, [r2, #32]
 8001af0:	e00b      	b.n	8001b0a <HAL_RCC_OscConfig+0x36e>
 8001af2:	4b5b      	ldr	r3, [pc, #364]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	4a5a      	ldr	r2, [pc, #360]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	f023 0301 	bic.w	r3, r3, #1
 8001afc:	6213      	str	r3, [r2, #32]
 8001afe:	4b58      	ldr	r3, [pc, #352]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	4a57      	ldr	r2, [pc, #348]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	f023 0304 	bic.w	r3, r3, #4
 8001b08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d015      	beq.n	8001b3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b12:	f7fe ff53 	bl	80009bc <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b18:	e00a      	b.n	8001b30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1a:	f7fe ff4f 	bl	80009bc <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e0b1      	b.n	8001c94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b30:	4b4b      	ldr	r3, [pc, #300]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0ee      	beq.n	8001b1a <HAL_RCC_OscConfig+0x37e>
 8001b3c:	e014      	b.n	8001b68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3e:	f7fe ff3d 	bl	80009bc <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b44:	e00a      	b.n	8001b5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b46:	f7fe ff39 	bl	80009bc <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e09b      	b.n	8001c94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b5c:	4b40      	ldr	r3, [pc, #256]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1ee      	bne.n	8001b46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b68:	7dfb      	ldrb	r3, [r7, #23]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d105      	bne.n	8001b7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b6e:	4b3c      	ldr	r3, [pc, #240]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	4a3b      	ldr	r2, [pc, #236]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8087 	beq.w	8001c92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b84:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d061      	beq.n	8001c54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d146      	bne.n	8001c26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b98:	4b33      	ldr	r3, [pc, #204]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7fe ff0d 	bl	80009bc <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba6:	f7fe ff09 	bl	80009bc <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e06d      	b.n	8001c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb8:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f0      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bcc:	d108      	bne.n	8001be0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bce:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	4921      	ldr	r1, [pc, #132]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be0:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a19      	ldr	r1, [r3, #32]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	491b      	ldr	r1, [pc, #108]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7fe fedd 	bl	80009bc <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c06:	f7fe fed9 	bl	80009bc <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e03d      	b.n	8001c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x46a>
 8001c24:	e035      	b.n	8001c92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7fe fec6 	bl	80009bc <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c34:	f7fe fec2 	bl	80009bc <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e026      	b.n	8001c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x498>
 8001c52:	e01e      	b.n	8001c92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d107      	bne.n	8001c6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e019      	b.n	8001c94 <HAL_RCC_OscConfig+0x4f8>
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40007000 	.word	0x40007000
 8001c68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_OscConfig+0x500>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d106      	bne.n	8001c8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d001      	beq.n	8001c92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0d0      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d910      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b67      	ldr	r3, [pc, #412]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 0207 	bic.w	r2, r3, #7
 8001cca:	4965      	ldr	r1, [pc, #404]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b63      	ldr	r3, [pc, #396]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0b8      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d020      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cfc:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4a58      	ldr	r2, [pc, #352]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d14:	4b53      	ldr	r3, [pc, #332]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	4a52      	ldr	r2, [pc, #328]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d20:	4b50      	ldr	r3, [pc, #320]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	494d      	ldr	r1, [pc, #308]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d040      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d115      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e07f      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d107      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5e:	4b41      	ldr	r3, [pc, #260]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d109      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e073      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6e:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e06b      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d7e:	4b39      	ldr	r3, [pc, #228]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f023 0203 	bic.w	r2, r3, #3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	4936      	ldr	r1, [pc, #216]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d90:	f7fe fe14 	bl	80009bc <HAL_GetTick>
 8001d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d96:	e00a      	b.n	8001dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d98:	f7fe fe10 	bl	80009bc <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e053      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dae:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 020c 	and.w	r2, r3, #12
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d1eb      	bne.n	8001d98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc0:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d210      	bcs.n	8001df0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dce:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 0207 	bic.w	r2, r3, #7
 8001dd6:	4922      	ldr	r1, [pc, #136]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d001      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e032      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d008      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	4916      	ldr	r1, [pc, #88]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d009      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	490e      	ldr	r1, [pc, #56]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e2e:	f000 f821 	bl	8001e74 <HAL_RCC_GetSysClockFreq>
 8001e32:	4602      	mov	r2, r0
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	490a      	ldr	r1, [pc, #40]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e40:	5ccb      	ldrb	r3, [r1, r3]
 8001e42:	fa22 f303 	lsr.w	r3, r2, r3
 8001e46:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <HAL_RCC_ClockConfig+0x1cc>)
 8001e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_RCC_ClockConfig+0x1d0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fd72 	bl	8000938 <HAL_InitTick>

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40022000 	.word	0x40022000
 8001e64:	40021000 	.word	0x40021000
 8001e68:	08002048 	.word	0x08002048
 8001e6c:	20000010 	.word	0x20000010
 8001e70:	20000014 	.word	0x20000014

08001e74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e74:	b490      	push	{r4, r7}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e7a:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xac>)
 8001e7c:	1d3c      	adds	r4, r7, #4
 8001e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e84:	f240 2301 	movw	r3, #513	; 0x201
 8001e88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e9e:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d002      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d003      	beq.n	8001eba <HAL_RCC_GetSysClockFreq+0x46>
 8001eb2:	e02b      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eb6:	623b      	str	r3, [r7, #32]
      break;
 8001eb8:	e02b      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	0c9b      	lsrs	r3, r3, #18
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	3328      	adds	r3, #40	; 0x28
 8001ec4:	443b      	add	r3, r7
 8001ec6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001eca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d012      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ed6:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	0c5b      	lsrs	r3, r3, #17
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	3328      	adds	r3, #40	; 0x28
 8001ee2:	443b      	add	r3, r7
 8001ee4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ee8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eee:	fb03 f202 	mul.w	r2, r3, r2
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8001efa:	e004      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f00:	fb02 f303 	mul.w	r3, r2, r3
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	623b      	str	r3, [r7, #32]
      break;
 8001f0a:	e002      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f0e:	623b      	str	r3, [r7, #32]
      break;
 8001f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f12:	6a3b      	ldr	r3, [r7, #32]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3728      	adds	r7, #40	; 0x28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc90      	pop	{r4, r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	08002038 	.word	0x08002038
 8001f24:	40021000 	.word	0x40021000
 8001f28:	007a1200 	.word	0x007a1200
 8001f2c:	003d0900 	.word	0x003d0900

08001f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f34:	4b02      	ldr	r3, [pc, #8]	; (8001f40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr
 8001f40:	20000010 	.word	0x20000010

08001f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f48:	f7ff fff2 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	0a1b      	lsrs	r3, r3, #8
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	4903      	ldr	r1, [pc, #12]	; (8001f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f5a:	5ccb      	ldrb	r3, [r1, r3]
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000
 8001f68:	08002058 	.word	0x08002058

08001f6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <RCC_Delay+0x34>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <RCC_Delay+0x38>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	0a5b      	lsrs	r3, r3, #9
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
 8001f86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f88:	bf00      	nop
  }
  while (Delay --);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1e5a      	subs	r2, r3, #1
 8001f8e:	60fa      	str	r2, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f9      	bne.n	8001f88 <RCC_Delay+0x1c>
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	20000010 	.word	0x20000010
 8001fa4:	10624dd3 	.word	0x10624dd3

08001fa8 <__libc_init_array>:
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	2600      	movs	r6, #0
 8001fac:	4d0c      	ldr	r5, [pc, #48]	; (8001fe0 <__libc_init_array+0x38>)
 8001fae:	4c0d      	ldr	r4, [pc, #52]	; (8001fe4 <__libc_init_array+0x3c>)
 8001fb0:	1b64      	subs	r4, r4, r5
 8001fb2:	10a4      	asrs	r4, r4, #2
 8001fb4:	42a6      	cmp	r6, r4
 8001fb6:	d109      	bne.n	8001fcc <__libc_init_array+0x24>
 8001fb8:	f000 f822 	bl	8002000 <_init>
 8001fbc:	2600      	movs	r6, #0
 8001fbe:	4d0a      	ldr	r5, [pc, #40]	; (8001fe8 <__libc_init_array+0x40>)
 8001fc0:	4c0a      	ldr	r4, [pc, #40]	; (8001fec <__libc_init_array+0x44>)
 8001fc2:	1b64      	subs	r4, r4, r5
 8001fc4:	10a4      	asrs	r4, r4, #2
 8001fc6:	42a6      	cmp	r6, r4
 8001fc8:	d105      	bne.n	8001fd6 <__libc_init_array+0x2e>
 8001fca:	bd70      	pop	{r4, r5, r6, pc}
 8001fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fd0:	4798      	blx	r3
 8001fd2:	3601      	adds	r6, #1
 8001fd4:	e7ee      	b.n	8001fb4 <__libc_init_array+0xc>
 8001fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fda:	4798      	blx	r3
 8001fdc:	3601      	adds	r6, #1
 8001fde:	e7f2      	b.n	8001fc6 <__libc_init_array+0x1e>
 8001fe0:	08002060 	.word	0x08002060
 8001fe4:	08002060 	.word	0x08002060
 8001fe8:	08002060 	.word	0x08002060
 8001fec:	08002064 	.word	0x08002064

08001ff0 <memset>:
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4402      	add	r2, r0
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d100      	bne.n	8001ffa <memset+0xa>
 8001ff8:	4770      	bx	lr
 8001ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8001ffe:	e7f9      	b.n	8001ff4 <memset+0x4>

08002000 <_init>:
 8002000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002002:	bf00      	nop
 8002004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002006:	bc08      	pop	{r3}
 8002008:	469e      	mov	lr, r3
 800200a:	4770      	bx	lr

0800200c <_fini>:
 800200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800200e:	bf00      	nop
 8002010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002012:	bc08      	pop	{r3}
 8002014:	469e      	mov	lr, r3
 8002016:	4770      	bx	lr
